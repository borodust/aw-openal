;; Generated by :claw at 2021-10-31T22:17:17.040140Z
(uiop:define-package :%al.ext (:use))
(uiop:define-package :aw-openal-ext-bindings~pristine (:use :cl))
(common-lisp:in-package :aw-openal-ext-bindings~pristine)

(defparameter %al.ext::+api+ nil)

(defparameter %al.ext::+apientry+ nil)

(defparameter %al.ext::+api+ nil)

(defparameter %al.ext::+apientry+ nil)

(defparameter %al.ext::+5point1+ 5380)

(defparameter %al.ext::+6point1+ 5381)

(defparameter %al.ext::+7point1+ 5382)

(defparameter %al.ext::+acn+ 1)

(defparameter %al.ext::+l-attributes+ 4099)

(defparameter %al.ext::+l-devices-specifier+ 4115)

(defparameter %al.ext::+ambisonic-layout+ 6551)

(defparameter %al.ext::+ambisonic-order+ 6553)

(defparameter %al.ext::+ambisonic-scaling+ 6552)

(defparameter %al.ext::+api+ nil)

(defparameter %al.ext::+apientry+ nil)

(defparameter %al.ext::+attributes-size+ 4098)

(defparameter %al.ext::+bformat3d+ 5383)

(defparameter %al.ext::+byte+ 5120)

(defparameter %al.ext::+capture-default-device-specifier+ 785)

(defparameter %al.ext::+capture-device-specifier+ 784)

(defparameter %al.ext::+capture-samples+ 786)

(defparameter %al.ext::+chan-cd-loki+ 5242883)

(defparameter %al.ext::+chan-main-loki+ 5242881)

(defparameter %al.ext::+chan-pcm-loki+ 5242882)

(defparameter %al.ext::+connected+ 787)

(defparameter %al.ext::+default-all-devices-specifier+ 4114)

(defparameter %al.ext::+default-device-specifier+ 4100)

(defparameter %al.ext::+default-filter-order+ 4352)

(defparameter %al.ext::+device-clock-latency+ 5634)

(defparameter %al.ext::+device-clock+ 5632)

(defparameter %al.ext::+device-latency+ 5633)

(defparameter %al.ext::+device-specifier+ 4101)

(defparameter %al.ext::+dont-care+ 2)

(defparameter %al.ext::+major-version+ 131073)

(defparameter %al.ext::+minor-version+ 131074)

(defparameter %al.ext::+enumerate-all+ 1)

(defparameter %al.ext::+extensions+ 4102)

(defparameter %al.ext::+ext-capture+ 1)

(defparameter %al.ext::+ext-dedicated+ 1)

(defparameter %al.ext::+ext-default-filter-order+ 1)

(defparameter %al.ext::+ext-efx+ 1)

(defparameter %al.ext::+ext-efx-name+ "ALC_EXT_EFX")

(defparameter %al.ext::+ext-disconnect+ 1)

(defparameter %al.ext::+ext-thread-local-context+ 1)

(defparameter %al.ext::+false+ 0)

(defparameter %al.ext::+float+ 5126)

(defparameter %al.ext::+format-channels+ 6544)

(defparameter %al.ext::+format-type+ 6545)

(defparameter %al.ext::+frequency+ 4103)

(defparameter %al.ext::+fuma+ 0)

(defparameter %al.ext::+hrtf-denied+ 2)

(defparameter %al.ext::+hrtf-disabled+ 0)

(defparameter %al.ext::+hrtf-enabled+ 1)

(defparameter %al.ext::+hrtf-headphones-detected+ 4)

(defparameter %al.ext::+hrtf-id+ 6550)

(defparameter %al.ext::+hrtf-required+ 3)

(defparameter %al.ext::+hrtf+ 6546)

(defparameter %al.ext::+hrtf-specifier+ 6549)

(defparameter %al.ext::+hrtf-status+ 6547)

(defparameter %al.ext::+hrtf-unsupported-format+ 5)

(defparameter %al.ext::+int+ 5124)

(defparameter %al.ext::+invalid+ 0)

(defparameter %al.ext::+invalid-cont+ 40962)

(defparameter %al.ext::+invalid-device+ 40961)

(defparameter %al.ext::+invalid-enum+ 40963)

(defparameter %al.ext::+invalid-value+ 40964)

(defparameter %al.ext::+loki-audio-channel+ 1)

(defparameter %al.ext::+major-version+ 4096)

(defparameter %al.ext::+max-ambisonic-order+ 6555)

(defparameter %al.ext::+max-auxiliary-sends+ 131075)

(defparameter %al.ext::+minor-version+ 4097)

(defparameter %al.ext::+mono+ 5376)

(defparameter %al.ext::+mono-sources+ 4112)

(defparameter %al.ext::+n3d+ 2)

(defparameter %al.ext::+no-error+ 0)

(defparameter %al.ext::+num-hrtf-specifiers+ 6548)

(defparameter %al.ext::+output-limiter+ 6554)

(defparameter %al.ext::+out-of-memory+ 40965)

(defparameter %al.ext::+quad+ 5379)

(defparameter %al.ext::+refresh+ 4104)

(defparameter %al.ext::+short+ 5122)

(defparameter %al.ext::+sn3d+ 1)

(defparameter %al.ext::+soft-hrtf+ 1)

(defparameter %al.ext::+soft-device-clock+ 1)

(defparameter %al.ext::+soft-loopback+ 1)

(defparameter %al.ext::+soft-loopback-bformat+ 1)

(defparameter %al.ext::+soft-output-limiter+ nil)

(defparameter %al.ext::+soft-pause-device+ 1)

(defparameter %al.ext::+stereo+ 5377)

(defparameter %al.ext::+stereo-sources+ 4113)

(defparameter %al.ext::+sync+ 4105)

(defparameter %al.ext::+true+ 1)

(defparameter %al.ext::+unsigned-byte+ 5121)

(defparameter %al.ext::+unsigned-int+ 5125)

(defparameter %al.ext::+unsigned-short+ 5123)

(defparameter %al.ext::+version-0-1+ 1)

(defparameter %al.ext::+5point1-16+ 4619)

(defparameter %al.ext::+5point1-32f+ 4620)

(defparameter %al.ext::+5point1-8+ 4618)

(defparameter %al.ext::+5point1+ 5380)

(defparameter %al.ext::+6point1-16+ 4622)

(defparameter %al.ext::+6point1-32f+ 4623)

(defparameter %al.ext::+6point1-8+ 4621)

(defparameter %al.ext::+6point1+ 5381)

(defparameter %al.ext::+7point1-16+ 4625)

(defparameter %al.ext::+7point1-32f+ 4626)

(defparameter %al.ext::+7point1-8+ 4624)

(defparameter %al.ext::+7point1+ 5382)

(defparameter %al.ext::+acn+ 1)

(defparameter %al.ext::+air-absorption-factor+ 131079)

(defparameter %al.ext::+%h+ nil)

(defparameter %al.ext::+ext-h+ nil)

(defparameter %al.ext::+ext-prototypes+ 1)

(defparameter %al.ext::+%h+ nil)

(defparameter %al.ext::+ambisonic-layout+ 6551)

(defparameter %al.ext::+ambisonic-scaling+ 6552)

(defparameter %al.ext::+api+ nil)

(defparameter %al.ext::+apientry+ nil)

(defparameter %al.ext::+autowah-attack-time+ 1)

(defparameter %al.ext::+autowah-default-attack-time+ 0.05999999865889549D0)

(defparameter %al.ext::+autowah-default-peak-gain+ 11.220000267028809D0)

(defparameter %al.ext::+autowah-default-release-time+ 0.05999999865889549D0)

(defparameter %al.ext::+autowah-default-resonance+ 1000.0D0)

(defparameter %al.ext::+autowah-max-attack-time+ 1.0D0)

(defparameter %al.ext::+autowah-max-peak-gain+ 31621.0D0)

(defparameter %al.ext::+autowah-max-release-time+ 1.0D0)

(defparameter %al.ext::+autowah-max-resonance+ 1000.0D0)

(defparameter %al.ext::+autowah-min-attack-time+ 9.999999747378752D-5)

(defparameter %al.ext::+autowah-min-peak-gain+ 2.9999999242136255D-5)

(defparameter %al.ext::+autowah-min-release-time+ 9.999999747378752D-5)

(defparameter %al.ext::+autowah-min-resonance+ 2.0D0)

(defparameter %al.ext::+autowah-peak-gain+ 4)

(defparameter %al.ext::+autowah-release-time+ 2)

(defparameter %al.ext::+autowah-resonance+ 3)

(defparameter %al.ext::+auto+ 2)

(defparameter %al.ext::+auxiliary-send-filter+ 131078)

(defparameter %al.ext::+auxiliary-send-filter-gainhf-auto+ 131084)

(defparameter %al.ext::+auxiliary-send-filter-gain-auto+ 131083)

(defparameter %al.ext::+bandpass-default-gain+ 1.0D0)

(defparameter %al.ext::+bandpass-default-gainhf+ 1.0D0)

(defparameter %al.ext::+bandpass-default-gainlf+ 1.0D0)

(defparameter %al.ext::+bandpass-gain+ 1)

(defparameter %al.ext::+bandpass-gainhf+ 3)

(defparameter %al.ext::+bandpass-gainlf+ 2)

(defparameter %al.ext::+bandpass-max-gain+ 1.0D0)

(defparameter %al.ext::+bandpass-max-gainhf+ 1.0D0)

(defparameter %al.ext::+bandpass-max-gainlf+ 1.0D0)

(defparameter %al.ext::+bandpass-min-gain+ 0.0D0)

(defparameter %al.ext::+bandpass-min-gainhf+ 0.0D0)

(defparameter %al.ext::+bandpass-min-gainlf+ 0.0D0)

(defparameter %al.ext::+bits+ 8194)

(defparameter %al.ext::+buffer+ 4105)

(defparameter %al.ext::+buffers-processed+ 4118)

(defparameter %al.ext::+buffers-queued+ 4117)

(defparameter %al.ext::+byte3+ 5128)

(defparameter %al.ext::+byte-length+ 8201)

(defparameter %al.ext::+byte-offset+ 4134)

(defparameter %al.ext::+byte-rw-offsets+ 4145)

(defparameter %al.ext::+byte+ 5120)

(defparameter %al.ext::+channels+ 8195)

(defparameter %al.ext::+chorus-default-delay+ 0.01600000075995922D0)

(defparameter %al.ext::+chorus-default-depth+ 0.10000000149011612D0)

(defparameter %al.ext::+chorus-default-feedback+ 0.25D0)

(defparameter %al.ext::+chorus-default-phase+ 90)

(defparameter %al.ext::+chorus-default-rate+ 1.100000023841858D0)

(defparameter %al.ext::+chorus-default-waveform+ 1)

(defparameter %al.ext::+chorus-delay+ 6)

(defparameter %al.ext::+chorus-depth+ 4)

(defparameter %al.ext::+chorus-feedback+ 5)

(defparameter %al.ext::+chorus-max-delay+ 0.01600000075995922D0)

(defparameter %al.ext::+chorus-max-depth+ 1.0D0)

(defparameter %al.ext::+chorus-max-feedback+ 1.0D0)

(defparameter %al.ext::+chorus-max-phase+ 180)

(defparameter %al.ext::+chorus-max-rate+ 10.0D0)

(defparameter %al.ext::+chorus-max-waveform+ 1)

(defparameter %al.ext::+chorus-min-delay+ 0.0D0)

(defparameter %al.ext::+chorus-min-depth+ 0.0D0)

(defparameter %al.ext::+chorus-min-feedback+ -1.0D0)

(defparameter %al.ext::+chorus-min-phase+ -180)

(defparameter %al.ext::+chorus-min-rate+ 0.0D0)

(defparameter %al.ext::+chorus-min-waveform+ 0)

(defparameter %al.ext::+chorus-phase+ 2)

(defparameter %al.ext::+chorus-rate+ 3)

(defparameter %al.ext::+chorus-waveform+ 1)

(defparameter %al.ext::+chorus-waveform-sinusoid+ 0)

(defparameter %al.ext::+chorus-waveform-triangle+ 1)

(defparameter %al.ext::+compressor-default-onoff+ 1)

(defparameter %al.ext::+compressor-max-onoff+ 1)

(defparameter %al.ext::+compressor-min-onoff+ 0)

(defparameter %al.ext::+compressor-onoff+ 1)

(defparameter %al.ext::+cone-inner-angle+ 4097)

(defparameter %al.ext::+cone-outer-angle+ 4098)

(defparameter %al.ext::+cone-outer-gain+ 4130)

(defparameter %al.ext::+cone-outer-gainhf+ 131081)

(defparameter %al.ext::+dedicated-gain+ 1)

(defparameter %al.ext::+default-air-absorption-factor+ 0.0D0)

(defparameter %al.ext::+default-auxiliary-send-filter-gainhf-auto+ 1)

(defparameter %al.ext::+default-auxiliary-send-filter-gain-auto+ 1)

(defparameter %al.ext::+default-cone-outer-gainhf+ 1.0D0)

(defparameter %al.ext::+default-direct-filter-gainhf-auto+ 1)

(defparameter %al.ext::+default-meters-per-unit+ 1.0D0)

(defparameter %al.ext::+default-resampler+ 4625)

(defparameter %al.ext::+default-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+deferred-updates+ 49154)

(defparameter %al.ext::+direction+ 4101)

(defparameter %al.ext::+direct-channels+ 4147)

(defparameter %al.ext::+direct-filter+ 131077)

(defparameter %al.ext::+direct-filter-gainhf-auto+ 131082)

(defparameter %al.ext::+distance-model+ 53248)

(defparameter %al.ext::+distortion-default-edge+ 0.20000000298023224D0)

(defparameter %al.ext::+distortion-default-eqbandwidth+ 3600.0D0)

(defparameter %al.ext::+distortion-default-eqcenter+ 3600.0D0)

(defparameter %al.ext::+distortion-default-gain+ 0.05000000074505806D0)

(defparameter %al.ext::+distortion-default-lowpass-cutoff+ 8000.0D0)

(defparameter %al.ext::+distortion-edge+ 1)

(defparameter %al.ext::+distortion-eqbandwidth+ 5)

(defparameter %al.ext::+distortion-eqcenter+ 4)

(defparameter %al.ext::+distortion-gain+ 2)

(defparameter %al.ext::+distortion-lowpass-cutoff+ 3)

(defparameter %al.ext::+distortion-max-edge+ 1.0D0)

(defparameter %al.ext::+distortion-max-eqbandwidth+ 24000.0D0)

(defparameter %al.ext::+distortion-max-eqcenter+ 24000.0D0)

(defparameter %al.ext::+distortion-max-gain+ 1.0D0)

(defparameter %al.ext::+distortion-max-lowpass-cutoff+ 24000.0D0)

(defparameter %al.ext::+distortion-min-edge+ 0.0D0)

(defparameter %al.ext::+distortion-min-eqbandwidth+ 80.0D0)

(defparameter %al.ext::+distortion-min-eqcenter+ 80.0D0)

(defparameter %al.ext::+distortion-min-gain+ 0.009999999776482582D0)

(defparameter %al.ext::+distortion-min-lowpass-cutoff+ 80.0D0)

(defparameter %al.ext::+doppler-factor+ 49152)

(defparameter %al.ext::+doppler-velocity+ 49153)

(defparameter %al.ext::+double+ 5127)

(defparameter %al.ext::+drop-unmatched+ 1)

(defparameter %al.ext::+eaxreverb-air-absorption-gainhf+ 19)

(defparameter %al.ext::+eaxreverb-decay-hflimit+ 23)

(defparameter %al.ext::+eaxreverb-decay-hfratio+ 7)

(defparameter %al.ext::+eaxreverb-decay-lfratio+ 8)

(defparameter %al.ext::+eaxreverb-decay-time+ 6)

(defparameter %al.ext::+eaxreverb-default-air-absorption-gainhf+ 0.9940000176429749D0)

(defparameter %al.ext::+eaxreverb-default-decay-hflimit+ 1)

(defparameter %al.ext::+eaxreverb-default-decay-hfratio+ 0.8299999833106995D0)

(defparameter %al.ext::+eaxreverb-default-decay-lfratio+ 1.0D0)

(defparameter %al.ext::+eaxreverb-default-decay-time+ 1.4900000095367432D0)

(defparameter %al.ext::+eaxreverb-default-density+ 1.0D0)

(defparameter %al.ext::+eaxreverb-default-diffusion+ 1.0D0)

(defparameter %al.ext::+eaxreverb-default-echo-depth+ 0.0D0)

(defparameter %al.ext::+eaxreverb-default-echo-time+ 0.25D0)

(defparameter %al.ext::+eaxreverb-default-gain+ 0.3199999928474426D0)

(defparameter %al.ext::+eaxreverb-default-gainhf+ 0.8899999856948853D0)

(defparameter %al.ext::+eaxreverb-default-gainlf+ 1.0D0)

(defparameter %al.ext::+eaxreverb-default-hfreference+ 5000.0D0)

(defparameter %al.ext::+eaxreverb-default-late-reverb-delay+ 0.010999999940395355D0)

(defparameter %al.ext::+eaxreverb-default-late-reverb-gain+ 1.2599999904632568D0)

(defparameter %al.ext::+eaxreverb-default-late-reverb-pan-xyz+ 0.0D0)

(defparameter %al.ext::+eaxreverb-default-lfreference+ 250.0D0)

(defparameter %al.ext::+eaxreverb-default-modulation-depth+ 0.0D0)

(defparameter %al.ext::+eaxreverb-default-modulation-time+ 0.25D0)

(defparameter %al.ext::+eaxreverb-default-reflections-delay+ 0.007000000216066837D0)

(defparameter %al.ext::+eaxreverb-default-reflections-gain+ 0.05000000074505806D0)

(defparameter %al.ext::+eaxreverb-default-reflections-pan-xyz+ 0.0D0)

(defparameter %al.ext::+eaxreverb-default-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+eaxreverb-density+ 1)

(defparameter %al.ext::+eaxreverb-diffusion+ 2)

(defparameter %al.ext::+eaxreverb-echo-depth+ 16)

(defparameter %al.ext::+eaxreverb-echo-time+ 15)

(defparameter %al.ext::+eaxreverb-gain+ 3)

(defparameter %al.ext::+eaxreverb-gainhf+ 4)

(defparameter %al.ext::+eaxreverb-gainlf+ 5)

(defparameter %al.ext::+eaxreverb-hfreference+ 20)

(defparameter %al.ext::+eaxreverb-late-reverb-delay+ 13)

(defparameter %al.ext::+eaxreverb-late-reverb-gain+ 12)

(defparameter %al.ext::+eaxreverb-late-reverb-pan+ 14)

(defparameter %al.ext::+eaxreverb-lfreference+ 21)

(defparameter %al.ext::+eaxreverb-max-air-absorption-gainhf+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-decay-hflimit+ 1)

(defparameter %al.ext::+eaxreverb-max-decay-hfratio+ 2.0D0)

(defparameter %al.ext::+eaxreverb-max-decay-lfratio+ 2.0D0)

(defparameter %al.ext::+eaxreverb-max-decay-time+ 20.0D0)

(defparameter %al.ext::+eaxreverb-max-density+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-diffusion+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-echo-depth+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-echo-time+ 0.25D0)

(defparameter %al.ext::+eaxreverb-max-gain+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-gainhf+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-gainlf+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-hfreference+ 20000.0D0)

(defparameter %al.ext::+eaxreverb-max-late-reverb-delay+ 0.10000000149011612D0)

(defparameter %al.ext::+eaxreverb-max-late-reverb-gain+ 10.0D0)

(defparameter %al.ext::+eaxreverb-max-lfreference+ 1000.0D0)

(defparameter %al.ext::+eaxreverb-max-modulation-depth+ 1.0D0)

(defparameter %al.ext::+eaxreverb-max-modulation-time+ 4.0D0)

(defparameter %al.ext::+eaxreverb-max-reflections-delay+ 0.30000001192092896D0)

(defparameter %al.ext::+eaxreverb-max-reflections-gain+ 3.1600000858306885D0)

(defparameter %al.ext::+eaxreverb-max-room-rolloff-factor+ 10.0D0)

(defparameter %al.ext::+eaxreverb-min-air-absorption-gainhf+ 0.8920000195503235D0)

(defparameter %al.ext::+eaxreverb-min-decay-hflimit+ 0)

(defparameter %al.ext::+eaxreverb-min-decay-hfratio+ 0.10000000149011612D0)

(defparameter %al.ext::+eaxreverb-min-decay-lfratio+ 0.10000000149011612D0)

(defparameter %al.ext::+eaxreverb-min-decay-time+ 0.10000000149011612D0)

(defparameter %al.ext::+eaxreverb-min-density+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-diffusion+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-echo-depth+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-echo-time+ 0.07500000298023224D0)

(defparameter %al.ext::+eaxreverb-min-gain+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-gainhf+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-gainlf+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-hfreference+ 1000.0D0)

(defparameter %al.ext::+eaxreverb-min-late-reverb-delay+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-late-reverb-gain+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-lfreference+ 20.0D0)

(defparameter %al.ext::+eaxreverb-min-modulation-depth+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-modulation-time+ 0.03999999910593033D0)

(defparameter %al.ext::+eaxreverb-min-reflections-delay+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-reflections-gain+ 0.0D0)

(defparameter %al.ext::+eaxreverb-min-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+eaxreverb-modulation-depth+ 18)

(defparameter %al.ext::+eaxreverb-modulation-time+ 17)

(defparameter %al.ext::+eaxreverb-reflections-delay+ 10)

(defparameter %al.ext::+eaxreverb-reflections-gain+ 9)

(defparameter %al.ext::+eaxreverb-reflections-pan+ 11)

(defparameter %al.ext::+eaxreverb-room-rolloff-factor+ 22)

(defparameter %al.ext::+echo-damping+ 3)

(defparameter %al.ext::+echo-default-damping+ 0.5D0)

(defparameter %al.ext::+echo-default-delay+ 0.10000000149011612D0)

(defparameter %al.ext::+echo-default-feedback+ 0.5D0)

(defparameter %al.ext::+echo-default-lrdelay+ 0.10000000149011612D0)

(defparameter %al.ext::+echo-default-spread+ -1.0D0)

(defparameter %al.ext::+echo-delay+ 1)

(defparameter %al.ext::+echo-feedback+ 4)

(defparameter %al.ext::+echo-lrdelay+ 2)

(defparameter %al.ext::+echo-max-damping+ 0.9900000095367432D0)

(defparameter %al.ext::+echo-max-delay+ 0.2070000022649765D0)

(defparameter %al.ext::+echo-max-feedback+ 1.0D0)

(defparameter %al.ext::+echo-max-lrdelay+ 0.40400001406669617D0)

(defparameter %al.ext::+echo-max-spread+ 1.0D0)

(defparameter %al.ext::+echo-min-damping+ 0.0D0)

(defparameter %al.ext::+echo-min-delay+ 0.0D0)

(defparameter %al.ext::+echo-min-feedback+ 0.0D0)

(defparameter %al.ext::+echo-min-lrdelay+ 0.0D0)

(defparameter %al.ext::+echo-min-spread+ -1.0D0)

(defparameter %al.ext::+echo-spread+ 5)

(defparameter %al.ext::+effectslot-auxiliary-send-auto+ 3)

(defparameter %al.ext::+effectslot-effect+ 1)

(defparameter %al.ext::+effectslot-gain+ 2)

(defparameter %al.ext::+effectslot-null+ 0)

(defparameter %al.ext::+effectslot-target+ 6556)

(defparameter %al.ext::+effect-autowah+ 10)

(defparameter %al.ext::+effect-chorus+ 2)

(defparameter %al.ext::+effect-compressor+ 11)

(defparameter %al.ext::+effect-dedicated-dialogue+ 36865)

(defparameter %al.ext::+effect-dedicated-low-frequency-effect+ 36864)

(defparameter %al.ext::+effect-distortion+ 3)

(defparameter %al.ext::+effect-eaxreverb+ 32768)

(defparameter %al.ext::+effect-echo+ 4)

(defparameter %al.ext::+effect-equalizer+ 12)

(defparameter %al.ext::+effect-first-parameter+ 0)

(defparameter %al.ext::+effect-flanger+ 5)

(defparameter %al.ext::+effect-frequency-shifter+ 6)

(defparameter %al.ext::+effect-last-parameter+ 32768)

(defparameter %al.ext::+effect-null+ 0)

(defparameter %al.ext::+effect-pitch-shifter+ 8)

(defparameter %al.ext::+effect-reverb+ 1)

(defparameter %al.ext::+effect-ring-modulator+ 9)

(defparameter %al.ext::+effect-type+ 32769)

(defparameter %al.ext::+effect-vocal-morpher+ 7)

(defparameter %al.ext::+%h+ nil)

(defparameter %al.ext::+equalizer-default-high-cutoff+ 6000.0D0)

(defparameter %al.ext::+equalizer-default-high-gain+ 1.0D0)

(defparameter %al.ext::+equalizer-default-low-cutoff+ 200.0D0)

(defparameter %al.ext::+equalizer-default-low-gain+ 1.0D0)

(defparameter %al.ext::+equalizer-default-mid1-center+ 500.0D0)

(defparameter %al.ext::+equalizer-default-mid1-gain+ 1.0D0)

(defparameter %al.ext::+equalizer-default-mid1-width+ 1.0D0)

(defparameter %al.ext::+equalizer-default-mid2-center+ 3000.0D0)

(defparameter %al.ext::+equalizer-default-mid2-gain+ 1.0D0)

(defparameter %al.ext::+equalizer-default-mid2-width+ 1.0D0)

(defparameter %al.ext::+equalizer-high-cutoff+ 10)

(defparameter %al.ext::+equalizer-high-gain+ 9)

(defparameter %al.ext::+equalizer-low-cutoff+ 2)

(defparameter %al.ext::+equalizer-low-gain+ 1)

(defparameter %al.ext::+equalizer-max-high-cutoff+ 16000.0D0)

(defparameter %al.ext::+equalizer-max-high-gain+ 7.942999839782715D0)

(defparameter %al.ext::+equalizer-max-low-cutoff+ 800.0D0)

(defparameter %al.ext::+equalizer-max-low-gain+ 7.942999839782715D0)

(defparameter %al.ext::+equalizer-max-mid1-center+ 3000.0D0)

(defparameter %al.ext::+equalizer-max-mid1-gain+ 7.942999839782715D0)

(defparameter %al.ext::+equalizer-max-mid1-width+ 1.0D0)

(defparameter %al.ext::+equalizer-max-mid2-center+ 8000.0D0)

(defparameter %al.ext::+equalizer-max-mid2-gain+ 7.942999839782715D0)

(defparameter %al.ext::+equalizer-max-mid2-width+ 1.0D0)

(defparameter %al.ext::+equalizer-mid1-center+ 4)

(defparameter %al.ext::+equalizer-mid1-gain+ 3)

(defparameter %al.ext::+equalizer-mid1-width+ 5)

(defparameter %al.ext::+equalizer-mid2-center+ 7)

(defparameter %al.ext::+equalizer-mid2-gain+ 6)

(defparameter %al.ext::+equalizer-mid2-width+ 8)

(defparameter %al.ext::+equalizer-min-high-cutoff+ 4000.0D0)

(defparameter %al.ext::+equalizer-min-high-gain+ 0.12600000202655792D0)

(defparameter %al.ext::+equalizer-min-low-cutoff+ 50.0D0)

(defparameter %al.ext::+equalizer-min-low-gain+ 0.12600000202655792D0)

(defparameter %al.ext::+equalizer-min-mid1-center+ 200.0D0)

(defparameter %al.ext::+equalizer-min-mid1-gain+ 0.12600000202655792D0)

(defparameter %al.ext::+equalizer-min-mid1-width+ 0.009999999776482582D0)

(defparameter %al.ext::+equalizer-min-mid2-center+ 1000.0D0)

(defparameter %al.ext::+equalizer-min-mid2-gain+ 0.12600000202655792D0)

(defparameter %al.ext::+equalizer-min-mid2-width+ 0.009999999776482582D0)

(defparameter %al.ext::+event-callback-function+ 6562)

(defparameter %al.ext::+event-callback-user-param+ 6563)

(defparameter %al.ext::+event-type-buffer-completed+ 6564)

(defparameter %al.ext::+event-type-disconnected+ 6566)

(defparameter %al.ext::+event-type-source-state-changed+ 6565)

(defparameter %al.ext::+exponent-distance+ 53253)

(defparameter %al.ext::+exponent-distance-clamped+ 53254)

(defparameter %al.ext::+extensions+ 45060)

(defparameter %al.ext::+ext-alaw+ 1)

(defparameter %al.ext::+ext-bformat+ 1)

(defparameter %al.ext::+ext-foldback+ 1)

(defparameter %al.ext::+ext-foldback-name+ "AL_EXT_FOLDBACK")

(defparameter %al.ext::+ext-ima4+ 1)

(defparameter %al.ext::+ext-mcformats+ 1)

(defparameter %al.ext::+ext-mulaw+ 1)

(defparameter %al.ext::+ext-mulaw-bformat+ 1)

(defparameter %al.ext::+ext-mulaw-mcformats+ 1)

(defparameter %al.ext::+ext-source-radius+ 1)

(defparameter %al.ext::+ext-static-buffer+ 1)

(defparameter %al.ext::+ext-stereo-angles+ 1)

(defparameter %al.ext::+ext-double+ 1)

(defparameter %al.ext::+ext-float32+ 1)

(defparameter %al.ext::+ext-source-distance-model+ 1)

(defparameter %al.ext::+ext-vorbis+ 1)

(defparameter %al.ext::+false+ 0)

(defparameter %al.ext::+filter-bandpass+ 3)

(defparameter %al.ext::+filter-first-parameter+ 0)

(defparameter %al.ext::+filter-highpass+ 2)

(defparameter %al.ext::+filter-last-parameter+ 32768)

(defparameter %al.ext::+filter-lowpass+ 1)

(defparameter %al.ext::+filter-null+ 0)

(defparameter %al.ext::+filter-type+ 32769)

(defparameter %al.ext::+flanger-default-delay+ 0.0020000000949949026D0)

(defparameter %al.ext::+flanger-default-depth+ 1.0D0)

(defparameter %al.ext::+flanger-default-feedback+ -0.5D0)

(defparameter %al.ext::+flanger-default-phase+ 0)

(defparameter %al.ext::+flanger-default-rate+ 0.27000001072883606D0)

(defparameter %al.ext::+flanger-default-waveform+ 1)

(defparameter %al.ext::+flanger-delay+ 6)

(defparameter %al.ext::+flanger-depth+ 4)

(defparameter %al.ext::+flanger-feedback+ 5)

(defparameter %al.ext::+flanger-max-delay+ 0.004000000189989805D0)

(defparameter %al.ext::+flanger-max-depth+ 1.0D0)

(defparameter %al.ext::+flanger-max-feedback+ 1.0D0)

(defparameter %al.ext::+flanger-max-phase+ 180)

(defparameter %al.ext::+flanger-max-rate+ 10.0D0)

(defparameter %al.ext::+flanger-max-waveform+ 1)

(defparameter %al.ext::+flanger-min-delay+ 0.0D0)

(defparameter %al.ext::+flanger-min-depth+ 0.0D0)

(defparameter %al.ext::+flanger-min-feedback+ -1.0D0)

(defparameter %al.ext::+flanger-min-phase+ -180)

(defparameter %al.ext::+flanger-min-rate+ 0.0D0)

(defparameter %al.ext::+flanger-min-waveform+ 0)

(defparameter %al.ext::+flanger-phase+ 2)

(defparameter %al.ext::+flanger-rate+ 3)

(defparameter %al.ext::+flanger-waveform+ 1)

(defparameter %al.ext::+flanger-waveform-sinusoid+ 0)

(defparameter %al.ext::+flanger-waveform-triangle+ 1)

(defparameter %al.ext::+float+ 5126)

(defparameter %al.ext::+foldback-event-block+ 16658)

(defparameter %al.ext::+foldback-event-start+ 16657)

(defparameter %al.ext::+foldback-event-stop+ 16659)

(defparameter %al.ext::+foldback-mode-mono+ 16641)

(defparameter %al.ext::+foldback-mode-stereo+ 16642)

(defparameter %al.ext::+format-51chn16+ 4619)

(defparameter %al.ext::+format-51chn32+ 4620)

(defparameter %al.ext::+format-51chn8+ 4618)

(defparameter %al.ext::+format-51chn-mulaw+ 65571)

(defparameter %al.ext::+format-61chn16+ 4622)

(defparameter %al.ext::+format-61chn32+ 4623)

(defparameter %al.ext::+format-61chn8+ 4621)

(defparameter %al.ext::+format-61chn-mulaw+ 65572)

(defparameter %al.ext::+format-71chn16+ 4625)

(defparameter %al.ext::+format-71chn32+ 4626)

(defparameter %al.ext::+format-71chn8+ 4624)

(defparameter %al.ext::+format-71chn-mulaw+ 65573)

(defparameter %al.ext::+format-bformat2d-16+ 131106)

(defparameter %al.ext::+format-bformat2d-8+ 131105)

(defparameter %al.ext::+format-bformat2d-float32+ 131107)

(defparameter %al.ext::+format-bformat2d-mulaw+ 65585)

(defparameter %al.ext::+format-bformat3d-16+ 131122)

(defparameter %al.ext::+format-bformat3d-8+ 131121)

(defparameter %al.ext::+format-bformat3d-float32+ 131123)

(defparameter %al.ext::+format-bformat3d-mulaw+ 65586)

(defparameter %al.ext::+format-ima-adpcm-mono16+ 65536)

(defparameter %al.ext::+format-ima-adpcm-stereo16+ 65537)

(defparameter %al.ext::+format-mono16+ 4353)

(defparameter %al.ext::+format-mono8+ 4352)

(defparameter %al.ext::+format-mono-alaw+ 65558)

(defparameter %al.ext::+format-mono-double+ 65554)

(defparameter %al.ext::+format-mono-float32+ 65552)

(defparameter %al.ext::+format-mono-ima4+ 4864)

(defparameter %al.ext::+format-mono-msadpcm+ 4866)

(defparameter %al.ext::+format-mono-mulaw+ 65556)

(defparameter %al.ext::+format-mono-mulaw+ 65556)

(defparameter %al.ext::+format-quad16+ 4613)

(defparameter %al.ext::+format-quad16-loki+ 65541)

(defparameter %al.ext::+format-quad32+ 4614)

(defparameter %al.ext::+format-quad8+ 4612)

(defparameter %al.ext::+format-quad8-loki+ 65540)

(defparameter %al.ext::+format-quad-mulaw+ 65569)

(defparameter %al.ext::+format-rear16+ 4616)

(defparameter %al.ext::+format-rear32+ 4617)

(defparameter %al.ext::+format-rear8+ 4615)

(defparameter %al.ext::+format-rear-mulaw+ 65570)

(defparameter %al.ext::+format-stereo16+ 4355)

(defparameter %al.ext::+format-stereo8+ 4354)

(defparameter %al.ext::+format-stereo-alaw+ 65559)

(defparameter %al.ext::+format-stereo-double+ 65555)

(defparameter %al.ext::+format-stereo-float32+ 65553)

(defparameter %al.ext::+format-stereo-ima4+ 4865)

(defparameter %al.ext::+format-stereo-msadpcm+ 4867)

(defparameter %al.ext::+format-stereo-mulaw+ 65557)

(defparameter %al.ext::+format-stereo-mulaw+ 65557)

(defparameter %al.ext::+format-vorbis+ 65539)

(defparameter %al.ext::+format-wave+ 65538)

(defparameter %al.ext::+frequency+ 8193)

(defparameter %al.ext::+frequency-shifter-default-frequency+ 0.0D0)

(defparameter %al.ext::+frequency-shifter-default-left-direction+ 0)

(defparameter %al.ext::+frequency-shifter-default-right-direction+ 0)

(defparameter %al.ext::+frequency-shifter-direction-down+ 0)

(defparameter %al.ext::+frequency-shifter-direction-off+ 2)

(defparameter %al.ext::+frequency-shifter-direction-up+ 1)

(defparameter %al.ext::+frequency-shifter-frequency+ 1)

(defparameter %al.ext::+frequency-shifter-left-direction+ 2)

(defparameter %al.ext::+frequency-shifter-max-frequency+ 24000.0D0)

(defparameter %al.ext::+frequency-shifter-max-left-direction+ 2)

(defparameter %al.ext::+frequency-shifter-max-right-direction+ 2)

(defparameter %al.ext::+frequency-shifter-min-frequency+ 0.0D0)

(defparameter %al.ext::+frequency-shifter-min-left-direction+ 0)

(defparameter %al.ext::+frequency-shifter-min-right-direction+ 0)

(defparameter %al.ext::+frequency-shifter-right-direction+ 3)

(defparameter %al.ext::+fuma+ 0)

(defparameter %al.ext::+gain+ 4106)

(defparameter %al.ext::+gain-limit+ 8206)

(defparameter %al.ext::+highpass-default-gain+ 1.0D0)

(defparameter %al.ext::+highpass-default-gainlf+ 1.0D0)

(defparameter %al.ext::+highpass-gain+ 1)

(defparameter %al.ext::+highpass-gainlf+ 2)

(defparameter %al.ext::+highpass-max-gain+ 1.0D0)

(defparameter %al.ext::+highpass-max-gainlf+ 1.0D0)

(defparameter %al.ext::+highpass-min-gain+ 0.0D0)

(defparameter %al.ext::+highpass-min-gainlf+ 0.0D0)

(defparameter %al.ext::+illegal-command+ 40964)

(defparameter %al.ext::+illegal-enum+ 40962)

(defparameter %al.ext::+initial+ 4113)

(defparameter %al.ext::+internal-format+ 8200)

(defparameter %al.ext::+int+ 5124)

(defparameter %al.ext::+invalid+ -1)

(defparameter %al.ext::+invalid-enum+ 40962)

(defparameter %al.ext::+invalid-name+ 40961)

(defparameter %al.ext::+invalid-operation+ 40964)

(defparameter %al.ext::+invalid-value+ 40963)

(defparameter %al.ext::+inverse-distance+ 53249)

(defparameter %al.ext::+inverse-distance-clamped+ 53250)

(defparameter %al.ext::+linear-distance+ 53251)

(defparameter %al.ext::+linear-distance-clamped+ 53252)

(defparameter %al.ext::+loki-ima-adpcm-format+ 1)

(defparameter %al.ext::+loki-wave-format+ 1)

(defparameter %al.ext::+loki-quadriphonic+ 1)

(defparameter %al.ext::+looping+ 4103)

(defparameter %al.ext::+loop-points+ 8213)

(defparameter %al.ext::+lowpass-default-gain+ 1.0D0)

(defparameter %al.ext::+lowpass-default-gainhf+ 1.0D0)

(defparameter %al.ext::+lowpass-gain+ 1)

(defparameter %al.ext::+lowpass-gainhf+ 2)

(defparameter %al.ext::+lowpass-max-gain+ 1.0D0)

(defparameter %al.ext::+lowpass-max-gainhf+ 1.0D0)

(defparameter %al.ext::+lowpass-min-gain+ 0.0D0)

(defparameter %al.ext::+lowpass-min-gainhf+ 0.0D0)

(defparameter %al.ext::+max-air-absorption-factor+ 10.0D0)

(defparameter %al.ext::+max-auxiliary-send-filter-gainhf-auto+ 1)

(defparameter %al.ext::+max-auxiliary-send-filter-gain-auto+ 1)

(defparameter %al.ext::+max-cone-outer-gainhf+ 1.0D0)

(defparameter %al.ext::+max-direct-filter-gainhf-auto+ 1)

(defparameter %al.ext::+max-distance+ 4131)

(defparameter %al.ext::+max-gain+ 4110)

(defparameter %al.ext::+max-meters-per-unit+ 3.4028234663852886D+38)

(defparameter %al.ext::+max-room-rolloff-factor+ 10.0D0)

(defparameter %al.ext::+meters-per-unit+ 131076)

(defparameter %al.ext::+min-air-absorption-factor+ 0.0D0)

(defparameter %al.ext::+min-auxiliary-send-filter-gainhf-auto+ 0)

(defparameter %al.ext::+min-auxiliary-send-filter-gain-auto+ 0)

(defparameter %al.ext::+min-cone-outer-gainhf+ 0.0D0)

(defparameter %al.ext::+min-direct-filter-gainhf-auto+ 0)

(defparameter %al.ext::+min-gain+ 4109)

(defparameter %al.ext::+min-meters-per-unit+ 1.1754943508222875D-38)

(defparameter %al.ext::+min-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+mono16+ 4353)

(defparameter %al.ext::+mono32f+ 65552)

(defparameter %al.ext::+mono8+ 4352)

(defparameter %al.ext::+mono+ 5376)

(defparameter %al.ext::+n3d+ 2)

(defparameter %al.ext::+none+ 0)

(defparameter %al.ext::+no-error+ 0)

(defparameter %al.ext::+num-resamplers+ 4624)

(defparameter %al.ext::+orientation+ 4111)

(defparameter %al.ext::+out-of-memory+ 40965)

(defparameter %al.ext::+pack-block-alignment+ 8205)

(defparameter %al.ext::+paused+ 4115)

(defparameter %al.ext::+pending+ 8209)

(defparameter %al.ext::+pitch+ 4099)

(defparameter %al.ext::+pitch-shifter-coarse-tune+ 1)

(defparameter %al.ext::+pitch-shifter-default-coarse-tune+ 12)

(defparameter %al.ext::+pitch-shifter-default-fine-tune+ 0)

(defparameter %al.ext::+pitch-shifter-fine-tune+ 2)

(defparameter %al.ext::+pitch-shifter-max-coarse-tune+ 12)

(defparameter %al.ext::+pitch-shifter-max-fine-tune+ 50)

(defparameter %al.ext::+pitch-shifter-min-coarse-tune+ -12)

(defparameter %al.ext::+pitch-shifter-min-fine-tune+ -50)

(defparameter %al.ext::+playing+ 4114)

(defparameter %al.ext::+position+ 4100)

(defparameter %al.ext::+processed+ 8210)

(defparameter %al.ext::+quad16+ 4613)

(defparameter %al.ext::+quad32f+ 4614)

(defparameter %al.ext::+quad8+ 4612)

(defparameter %al.ext::+quad+ 5379)

(defparameter %al.ext::+rear16+ 4616)

(defparameter %al.ext::+rear32f+ 4617)

(defparameter %al.ext::+rear8+ 4615)

(defparameter %al.ext::+rear+ 5378)

(defparameter %al.ext::+reference-distance+ 4128)

(defparameter %al.ext::+remix-unmatched+ 2)

(defparameter %al.ext::+renderer+ 45059)

(defparameter %al.ext::+resampler-name+ 4627)

(defparameter %al.ext::+reverb-air-absorption-gainhf+ 11)

(defparameter %al.ext::+reverb-decay-hflimit+ 13)

(defparameter %al.ext::+reverb-decay-hfratio+ 6)

(defparameter %al.ext::+reverb-decay-time+ 5)

(defparameter %al.ext::+reverb-default-air-absorption-gainhf+ 0.9940000176429749D0)

(defparameter %al.ext::+reverb-default-decay-hflimit+ 1)

(defparameter %al.ext::+reverb-default-decay-hfratio+ 0.8299999833106995D0)

(defparameter %al.ext::+reverb-default-decay-time+ 1.4900000095367432D0)

(defparameter %al.ext::+reverb-default-density+ 1.0D0)

(defparameter %al.ext::+reverb-default-diffusion+ 1.0D0)

(defparameter %al.ext::+reverb-default-gain+ 0.3199999928474426D0)

(defparameter %al.ext::+reverb-default-gainhf+ 0.8899999856948853D0)

(defparameter %al.ext::+reverb-default-late-reverb-delay+ 0.010999999940395355D0)

(defparameter %al.ext::+reverb-default-late-reverb-gain+ 1.2599999904632568D0)

(defparameter %al.ext::+reverb-default-reflections-delay+ 0.007000000216066837D0)

(defparameter %al.ext::+reverb-default-reflections-gain+ 0.05000000074505806D0)

(defparameter %al.ext::+reverb-default-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+reverb-density+ 1)

(defparameter %al.ext::+reverb-diffusion+ 2)

(defparameter %al.ext::+reverb-gain+ 3)

(defparameter %al.ext::+reverb-gainhf+ 4)

(defparameter %al.ext::+reverb-late-reverb-delay+ 10)

(defparameter %al.ext::+reverb-late-reverb-gain+ 9)

(defparameter %al.ext::+reverb-max-air-absorption-gainhf+ 1.0D0)

(defparameter %al.ext::+reverb-max-decay-hflimit+ 1)

(defparameter %al.ext::+reverb-max-decay-hfratio+ 2.0D0)

(defparameter %al.ext::+reverb-max-decay-time+ 20.0D0)

(defparameter %al.ext::+reverb-max-density+ 1.0D0)

(defparameter %al.ext::+reverb-max-diffusion+ 1.0D0)

(defparameter %al.ext::+reverb-max-gain+ 1.0D0)

(defparameter %al.ext::+reverb-max-gainhf+ 1.0D0)

(defparameter %al.ext::+reverb-max-late-reverb-delay+ 0.10000000149011612D0)

(defparameter %al.ext::+reverb-max-late-reverb-gain+ 10.0D0)

(defparameter %al.ext::+reverb-max-reflections-delay+ 0.30000001192092896D0)

(defparameter %al.ext::+reverb-max-reflections-gain+ 3.1600000858306885D0)

(defparameter %al.ext::+reverb-max-room-rolloff-factor+ 10.0D0)

(defparameter %al.ext::+reverb-min-air-absorption-gainhf+ 0.8920000195503235D0)

(defparameter %al.ext::+reverb-min-decay-hflimit+ 0)

(defparameter %al.ext::+reverb-min-decay-hfratio+ 0.10000000149011612D0)

(defparameter %al.ext::+reverb-min-decay-time+ 0.10000000149011612D0)

(defparameter %al.ext::+reverb-min-density+ 0.0D0)

(defparameter %al.ext::+reverb-min-diffusion+ 0.0D0)

(defparameter %al.ext::+reverb-min-gain+ 0.0D0)

(defparameter %al.ext::+reverb-min-gainhf+ 0.0D0)

(defparameter %al.ext::+reverb-min-late-reverb-delay+ 0.0D0)

(defparameter %al.ext::+reverb-min-late-reverb-gain+ 0.0D0)

(defparameter %al.ext::+reverb-min-reflections-delay+ 0.0D0)

(defparameter %al.ext::+reverb-min-reflections-gain+ 0.0D0)

(defparameter %al.ext::+reverb-min-room-rolloff-factor+ 0.0D0)

(defparameter %al.ext::+reverb-reflections-delay+ 8)

(defparameter %al.ext::+reverb-reflections-gain+ 7)

(defparameter %al.ext::+reverb-room-rolloff-factor+ 12)

(defparameter %al.ext::+ring-modulator-default-frequency+ 440.0D0)

(defparameter %al.ext::+ring-modulator-default-highpass-cutoff+ 800.0D0)

(defparameter %al.ext::+ring-modulator-default-waveform+ 0)

(defparameter %al.ext::+ring-modulator-frequency+ 1)

(defparameter %al.ext::+ring-modulator-highpass-cutoff+ 2)

(defparameter %al.ext::+ring-modulator-max-frequency+ 8000.0D0)

(defparameter %al.ext::+ring-modulator-max-highpass-cutoff+ 24000.0D0)

(defparameter %al.ext::+ring-modulator-max-waveform+ 2)

(defparameter %al.ext::+ring-modulator-min-frequency+ 0.0D0)

(defparameter %al.ext::+ring-modulator-min-highpass-cutoff+ 0.0D0)

(defparameter %al.ext::+ring-modulator-min-waveform+ 0)

(defparameter %al.ext::+ring-modulator-sawtooth+ 1)

(defparameter %al.ext::+ring-modulator-sinusoid+ 0)

(defparameter %al.ext::+ring-modulator-square+ 2)

(defparameter %al.ext::+ring-modulator-waveform+ 3)

(defparameter %al.ext::+rolloff-factor+ 4129)

(defparameter %al.ext::+room-rolloff-factor+ 131080)

(defparameter %al.ext::+sample-length+ 8202)

(defparameter %al.ext::+sample-offset+ 4133)

(defparameter %al.ext::+sample-offset-clock+ 4610)

(defparameter %al.ext::+sample-offset-latency+ 4608)

(defparameter %al.ext::+sample-rw-offsets+ 4146)

(defparameter %al.ext::+sec-length+ 8203)

(defparameter %al.ext::+sec-offset+ 4132)

(defparameter %al.ext::+sec-offset-clock+ 4611)

(defparameter %al.ext::+sec-offset-latency+ 4609)

(defparameter %al.ext::+short+ 5122)

(defparameter %al.ext::+size+ 8196)

(defparameter %al.ext::+sn3d+ 1)

(defparameter %al.ext::+soft-msadpcm+ 1)

(defparameter %al.ext::+soft-bformat-ex+ 1)

(defparameter %al.ext::+soft-block-alignment+ 1)

(defparameter %al.ext::+soft-buffer-samples+ 1)

(defparameter %al.ext::+soft-buffer-sub-data+ 1)

(defparameter %al.ext::+soft-deferred-updates+ 1)

(defparameter %al.ext::+soft-direct-channels+ 1)

(defparameter %al.ext::+soft-direct-channels-remix+ 1)

(defparameter %al.ext::+soft-effect-target+ nil)

(defparameter %al.ext::+soft-events+ 1)

(defparameter %al.ext::+soft-gain-clamp-ex+ 1)

(defparameter %al.ext::+soft-loop-points+ 1)

(defparameter %al.ext::+soft-source-latency+ 1)

(defparameter %al.ext::+soft-source-length+ 1)

(defparameter %al.ext::+soft-source-resampler+ nil)

(defparameter %al.ext::+soft-source-spatialize+ nil)

(defparameter %al.ext::+source-distance-model+ 512)

(defparameter %al.ext::+source-radius+ 4145)

(defparameter %al.ext::+source-relative+ 514)

(defparameter %al.ext::+source-resampler+ 4626)

(defparameter %al.ext::+source-spatialize+ 4628)

(defparameter %al.ext::+source-state+ 4112)

(defparameter %al.ext::+source-type+ 4135)

(defparameter %al.ext::+speed-of-sound+ 49155)

(defparameter %al.ext::+static+ 4136)

(defparameter %al.ext::+stereo16+ 4355)

(defparameter %al.ext::+stereo32f+ 65553)

(defparameter %al.ext::+stereo8+ 4354)

(defparameter %al.ext::+stereo-angles+ 4144)

(defparameter %al.ext::+stereo+ 5377)

(defparameter %al.ext::+stopped+ 4116)

(defparameter %al.ext::+streaming+ 4137)

(defparameter %al.ext::+true+ 1)

(defparameter %al.ext::+undetermined+ 4144)

(defparameter %al.ext::+unpack-block-alignment+ 8204)

(defparameter %al.ext::+unsigned-byte3+ 5129)

(defparameter %al.ext::+unsigned-byte+ 5121)

(defparameter %al.ext::+unsigned-int+ 5125)

(defparameter %al.ext::+unsigned-short+ 5123)

(defparameter %al.ext::+unused+ 8208)

(defparameter %al.ext::+velocity+ 4102)

(defparameter %al.ext::+vendor+ 45057)

(defparameter %al.ext::+version+ 45058)

(defparameter %al.ext::+version-1-0+ nil)

(defparameter %al.ext::+version-1-1+ nil)

(defparameter %al.ext::+vocal-morpher-default-phonemea+ 0)

(defparameter %al.ext::+vocal-morpher-default-phonemea-coarse-tuning+ 0)

(defparameter %al.ext::+vocal-morpher-default-phonemeb+ 10)

(defparameter %al.ext::+vocal-morpher-default-phonemeb-coarse-tuning+ 0)

(defparameter %al.ext::+vocal-morpher-default-rate+ 1.409999966621399D0)

(defparameter %al.ext::+vocal-morpher-default-waveform+ 0)

(defparameter %al.ext::+vocal-morpher-max-phonemea+ 29)

(defparameter %al.ext::+vocal-morpher-max-phonemea-coarse-tuning+ 24)

(defparameter %al.ext::+vocal-morpher-max-phonemeb+ 29)

(defparameter %al.ext::+vocal-morpher-max-phonemeb-coarse-tuning+ 24)

(defparameter %al.ext::+vocal-morpher-max-rate+ 10.0D0)

(defparameter %al.ext::+vocal-morpher-max-waveform+ 2)

(defparameter %al.ext::+vocal-morpher-min-phonemea+ 0)

(defparameter %al.ext::+vocal-morpher-min-phonemea-coarse-tuning+ -24)

(defparameter %al.ext::+vocal-morpher-min-phonemeb+ 0)

(defparameter %al.ext::+vocal-morpher-min-phonemeb-coarse-tuning+ -24)

(defparameter %al.ext::+vocal-morpher-min-rate+ 0.0D0)

(defparameter %al.ext::+vocal-morpher-min-waveform+ 0)

(defparameter %al.ext::+vocal-morpher-phonemea+ 1)

(defparameter %al.ext::+vocal-morpher-phonemea-coarse-tuning+ 2)

(defparameter %al.ext::+vocal-morpher-phonemeb+ 3)

(defparameter %al.ext::+vocal-morpher-phonemeb-coarse-tuning+ 4)

(defparameter %al.ext::+vocal-morpher-phoneme-a+ 0)

(defparameter %al.ext::+vocal-morpher-phoneme-aa+ 5)

(defparameter %al.ext::+vocal-morpher-phoneme-ae+ 6)

(defparameter %al.ext::+vocal-morpher-phoneme-ah+ 7)

(defparameter %al.ext::+vocal-morpher-phoneme-ao+ 8)

(defparameter %al.ext::+vocal-morpher-phoneme-b+ 15)

(defparameter %al.ext::+vocal-morpher-phoneme-d+ 16)

(defparameter %al.ext::+vocal-morpher-phoneme-e+ 1)

(defparameter %al.ext::+vocal-morpher-phoneme-eh+ 9)

(defparameter %al.ext::+vocal-morpher-phoneme-er+ 10)

(defparameter %al.ext::+vocal-morpher-phoneme-f+ 17)

(defparameter %al.ext::+vocal-morpher-phoneme-g+ 18)

(defparameter %al.ext::+vocal-morpher-phoneme-i+ 2)

(defparameter %al.ext::+vocal-morpher-phoneme-ih+ 11)

(defparameter %al.ext::+vocal-morpher-phoneme-iy+ 12)

(defparameter %al.ext::+vocal-morpher-phoneme-j+ 19)

(defparameter %al.ext::+vocal-morpher-phoneme-k+ 20)

(defparameter %al.ext::+vocal-morpher-phoneme-l+ 21)

(defparameter %al.ext::+vocal-morpher-phoneme-m+ 22)

(defparameter %al.ext::+vocal-morpher-phoneme-n+ 23)

(defparameter %al.ext::+vocal-morpher-phoneme-o+ 3)

(defparameter %al.ext::+vocal-morpher-phoneme-p+ 24)

(defparameter %al.ext::+vocal-morpher-phoneme-r+ 25)

(defparameter %al.ext::+vocal-morpher-phoneme-s+ 26)

(defparameter %al.ext::+vocal-morpher-phoneme-t+ 27)

(defparameter %al.ext::+vocal-morpher-phoneme-u+ 4)

(defparameter %al.ext::+vocal-morpher-phoneme-uh+ 13)

(defparameter %al.ext::+vocal-morpher-phoneme-uw+ 14)

(defparameter %al.ext::+vocal-morpher-phoneme-v+ 28)

(defparameter %al.ext::+vocal-morpher-phoneme-z+ 29)

(defparameter %al.ext::+vocal-morpher-rate+ 6)

(defparameter %al.ext::+vocal-morpher-waveform+ 5)

(defparameter %al.ext::+vocal-morpher-waveform-sawtooth+ 2)

(defparameter %al.ext::+vocal-morpher-waveform-sinusoid+ 0)

(defparameter %al.ext::+vocal-morpher-waveform-triangle+ 1)

(defparameter %al.ext::+eaxreverbproperties-defined+ nil)

(defparameter %al.ext::+presets-h+ nil)

(defparameter %al.ext::+reverb-preset-alley+ nil)

(defparameter %al.ext::+reverb-preset-arena+ nil)

(defparameter %al.ext::+reverb-preset-auditorium+ nil)

(defparameter %al.ext::+reverb-preset-bathroom+ nil)

(defparameter %al.ext::+reverb-preset-carpetedhallway+ nil)

(defparameter %al.ext::+reverb-preset-castle-alcove+ nil)

(defparameter %al.ext::+reverb-preset-castle-courtyard+ nil)

(defparameter %al.ext::+reverb-preset-castle-cupboard+ nil)

(defparameter %al.ext::+reverb-preset-castle-hall+ nil)

(defparameter %al.ext::+reverb-preset-castle-largeroom+ nil)

(defparameter %al.ext::+reverb-preset-castle-longpassage+ nil)

(defparameter %al.ext::+reverb-preset-castle-mediumroom+ nil)

(defparameter %al.ext::+reverb-preset-castle-shortpassage+ nil)

(defparameter %al.ext::+reverb-preset-castle-smallroom+ nil)

(defparameter %al.ext::+reverb-preset-cave+ nil)

(defparameter %al.ext::+reverb-preset-chapel+ nil)

(defparameter %al.ext::+reverb-preset-city+ nil)

(defparameter %al.ext::+reverb-preset-city-abandoned+ nil)

(defparameter %al.ext::+reverb-preset-city-library+ nil)

(defparameter %al.ext::+reverb-preset-city-museum+ nil)

(defparameter %al.ext::+reverb-preset-city-streets+ nil)

(defparameter %al.ext::+reverb-preset-city-subway+ nil)

(defparameter %al.ext::+reverb-preset-city-underpass+ nil)

(defparameter %al.ext::+reverb-preset-concerthall+ nil)

(defparameter %al.ext::+reverb-preset-dizzy+ nil)

(defparameter %al.ext::+reverb-preset-dome-saintpauls+ nil)

(defparameter %al.ext::+reverb-preset-dome-tomb+ nil)

(defparameter %al.ext::+reverb-preset-driving-commentator+ nil)

(defparameter %al.ext::+reverb-preset-driving-emptygrandstand+ nil)

(defparameter %al.ext::+reverb-preset-driving-fullgrandstand+ nil)

(defparameter %al.ext::+reverb-preset-driving-incar-luxury+ nil)

(defparameter %al.ext::+reverb-preset-driving-incar-racer+ nil)

(defparameter %al.ext::+reverb-preset-driving-incar-sports+ nil)

(defparameter %al.ext::+reverb-preset-driving-pitgarage+ nil)

(defparameter %al.ext::+reverb-preset-driving-tunnel+ nil)

(defparameter %al.ext::+reverb-preset-drugged+ nil)

(defparameter %al.ext::+reverb-preset-dustyroom+ nil)

(defparameter %al.ext::+reverb-preset-factory-alcove+ nil)

(defparameter %al.ext::+reverb-preset-factory-courtyard+ nil)

(defparameter %al.ext::+reverb-preset-factory-cupboard+ nil)

(defparameter %al.ext::+reverb-preset-factory-hall+ nil)

(defparameter %al.ext::+reverb-preset-factory-largeroom+ nil)

(defparameter %al.ext::+reverb-preset-factory-longpassage+ nil)

(defparameter %al.ext::+reverb-preset-factory-mediumroom+ nil)

(defparameter %al.ext::+reverb-preset-factory-shortpassage+ nil)

(defparameter %al.ext::+reverb-preset-factory-smallroom+ nil)

(defparameter %al.ext::+reverb-preset-forest+ nil)

(defparameter %al.ext::+reverb-preset-generic+ nil)

(defparameter %al.ext::+reverb-preset-hallway+ nil)

(defparameter %al.ext::+reverb-preset-hangar+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-alcove+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-courtyard+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-cupboard+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-hall+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-largeroom+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-longpassage+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-mediumroom+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-shortpassage+ nil)

(defparameter %al.ext::+reverb-preset-icepalace-smallroom+ nil)

(defparameter %al.ext::+reverb-preset-livingroom+ nil)

(defparameter %al.ext::+reverb-preset-mood-heaven+ nil)

(defparameter %al.ext::+reverb-preset-mood-hell+ nil)

(defparameter %al.ext::+reverb-preset-mood-memory+ nil)

(defparameter %al.ext::+reverb-preset-mountains+ nil)

(defparameter %al.ext::+reverb-preset-outdoors-backyard+ nil)

(defparameter %al.ext::+reverb-preset-outdoors-creek+ nil)

(defparameter %al.ext::+reverb-preset-outdoors-deepcanyon+ nil)

(defparameter %al.ext::+reverb-preset-outdoors-rollingplains+ nil)

(defparameter %al.ext::+reverb-preset-outdoors-valley+ nil)

(defparameter %al.ext::+reverb-preset-paddedcell+ nil)

(defparameter %al.ext::+reverb-preset-parkinglot+ nil)

(defparameter %al.ext::+reverb-preset-pipe-large+ nil)

(defparameter %al.ext::+reverb-preset-pipe-longthin+ nil)

(defparameter %al.ext::+reverb-preset-pipe-resonant+ nil)

(defparameter %al.ext::+reverb-preset-pipe-small+ nil)

(defparameter %al.ext::+reverb-preset-plain+ nil)

(defparameter %al.ext::+reverb-preset-prefab-caravan+ nil)

(defparameter %al.ext::+reverb-preset-prefab-outhouse+ nil)

(defparameter %al.ext::+reverb-preset-prefab-practiseroom+ nil)

(defparameter %al.ext::+reverb-preset-prefab-schoolroom+ nil)

(defparameter %al.ext::+reverb-preset-prefab-workshop+ nil)

(defparameter %al.ext::+reverb-preset-psychotic+ nil)

(defparameter %al.ext::+reverb-preset-quarry+ nil)

(defparameter %al.ext::+reverb-preset-room+ nil)

(defparameter %al.ext::+reverb-preset-sewerpipe+ nil)

(defparameter %al.ext::+reverb-preset-smallwaterroom+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-alcove+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-cupboard+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-hall+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-largeroom+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-longpassage+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-mediumroom+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-shortpassage+ nil)

(defparameter %al.ext::+reverb-preset-spacestation-smallroom+ nil)

(defparameter %al.ext::+reverb-preset-sport-emptystadium+ nil)

(defparameter %al.ext::+reverb-preset-sport-fullstadium+ nil)

(defparameter %al.ext::+reverb-preset-sport-gymnasium+ nil)

(defparameter %al.ext::+reverb-preset-sport-largeswimmingpool+ nil)

(defparameter %al.ext::+reverb-preset-sport-smallswimmingpool+ nil)

(defparameter %al.ext::+reverb-preset-sport-squashcourt+ nil)

(defparameter %al.ext::+reverb-preset-sport-stadiumtannoy+ nil)

(defparameter %al.ext::+reverb-preset-stonecorridor+ nil)

(defparameter %al.ext::+reverb-preset-stoneroom+ nil)

(defparameter %al.ext::+reverb-preset-underwater+ nil)

(defparameter %al.ext::+reverb-preset-wooden-alcove+ nil)

(defparameter %al.ext::+reverb-preset-wooden-courtyard+ nil)

(defparameter %al.ext::+reverb-preset-wooden-cupboard+ nil)

(defparameter %al.ext::+reverb-preset-wooden-hall+ nil)

(defparameter %al.ext::+reverb-preset-wooden-largeroom+ nil)

(defparameter %al.ext::+reverb-preset-wooden-longpassage+ nil)

(defparameter %al.ext::+reverb-preset-wooden-mediumroom+ nil)

(defparameter %al.ext::+reverb-preset-wooden-shortpassage+ nil)

(defparameter %al.ext::+reverb-preset-wooden-smallroom+ nil)

(defparameter %al.ext::+openal+ nil)

(cffi:defctype %al.ext::uint :unsigned-int)

(cffi:defctype %al.ext::enum :int)

(cffi:defctype %al.ext::float :float)

(declaim (inline %al.ext::auxiliary-effect-slotf))

(cffi:defcfun ("alAuxiliaryEffectSlotf"
               %al.ext::auxiliary-effect-slotf)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::fl-value %al.ext::float))

(declaim (inline %al.ext::auxiliary-effect-slotfv))

(cffi:defcfun ("alAuxiliaryEffectSlotfv"
               %al.ext::auxiliary-effect-slotfv)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(cffi:defctype %al.ext::int :int)

(declaim (inline %al.ext::auxiliary-effect-sloti))

(cffi:defcfun ("alAuxiliaryEffectSloti"
               %al.ext::auxiliary-effect-sloti)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::i-value %al.ext::int))

(declaim (inline %al.ext::auxiliary-effect-slotiv))

(cffi:defcfun ("alAuxiliaryEffectSlotiv"
               %al.ext::auxiliary-effect-slotiv)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::buffer3f))

(cffi:defcfun ("alBuffer3f" %al.ext::buffer3f)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::float)
              (%al.ext::value2 %al.ext::float)
              (%al.ext::value3 %al.ext::float))

(declaim (inline %al.ext::buffer3i))

(cffi:defcfun ("alBuffer3i" %al.ext::buffer3i)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::int)
              (%al.ext::value2 %al.ext::int)
              (%al.ext::value3 %al.ext::int))

(cffi:defctype %al.ext::void :void)

(cffi:defctype %al.ext::sizei :int)

(declaim (inline %al.ext::buffer-data))

(cffi:defcfun ("alBufferData" %al.ext::buffer-data)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::format %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void))
              (%al.ext::size %al.ext::sizei)
              (%al.ext::freq %al.ext::sizei))

(declaim (inline %al.ext::buffer-data-static))

(cffi:defcfun ("alBufferDataStatic" %al.ext::buffer-data-static)
              :void
              (%al.ext::buffer %al.ext::int)
              (%al.ext::format %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void))
              (%al.ext::len %al.ext::sizei)
              (%al.ext::freq %al.ext::sizei))

(declaim (inline %al.ext::buffer-samples))

(cffi:defcfun ("alBufferSamplesSOFT" %al.ext::buffer-samples)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::samplerate %al.ext::uint)
              (%al.ext::internalformat %al.ext::enum)
              (%al.ext::samples %al.ext::sizei)
              (%al.ext::channels %al.ext::enum)
              (%al.ext::type %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void)))

(declaim (inline %al.ext::buffer-sub-data))

(cffi:defcfun ("alBufferSubDataSOFT" %al.ext::buffer-sub-data)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::format %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void))
              (%al.ext::offset %al.ext::sizei)
              (%al.ext::length %al.ext::sizei))

(declaim (inline %al.ext::buffer-sub-samples))

(cffi:defcfun ("alBufferSubSamplesSOFT" %al.ext::buffer-sub-samples)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::offset %al.ext::sizei)
              (%al.ext::samples %al.ext::sizei)
              (%al.ext::channels %al.ext::enum)
              (%al.ext::type %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void)))

(declaim (inline %al.ext::bufferf))

(cffi:defcfun ("alBufferf" %al.ext::bufferf)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::float))

(declaim (inline %al.ext::bufferfv))

(cffi:defcfun ("alBufferfv" %al.ext::bufferfv)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::bufferi))

(cffi:defcfun ("alBufferi" %al.ext::bufferi)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::int))

(declaim (inline %al.ext::bufferiv))

(cffi:defcfun ("alBufferiv" %al.ext::bufferiv)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::defer-updates))

(cffi:defcfun ("alDeferUpdatesSOFT" %al.ext::defer-updates) :void)

(declaim (inline %al.ext::delete-auxiliary-effect-slots))

(cffi:defcfun ("alDeleteAuxiliaryEffectSlots"
               %al.ext::delete-auxiliary-effect-slots)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::effectslots
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::delete-buffers))

(cffi:defcfun ("alDeleteBuffers" %al.ext::delete-buffers)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::buffers
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::delete-effects))

(cffi:defcfun ("alDeleteEffects" %al.ext::delete-effects)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::effects
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::delete-filters))

(cffi:defcfun ("alDeleteFilters" %al.ext::delete-filters)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::filters
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::delete-sources))

(cffi:defcfun ("alDeleteSources" %al.ext::delete-sources)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::disable))

(cffi:defcfun ("alDisable" %al.ext::disable)
              :void
              (%al.ext::capability %al.ext::enum))

(declaim (inline %al.ext::distance-model))

(cffi:defcfun ("alDistanceModel" %al.ext::distance-model)
              :void
              (%al.ext::distance-model %al.ext::enum))

(declaim (inline %al.ext::doppler-factor))

(cffi:defcfun ("alDopplerFactor" %al.ext::doppler-factor)
              :void
              (%al.ext::value %al.ext::float))

(declaim (inline %al.ext::doppler-velocity))

(cffi:defcfun ("alDopplerVelocity" %al.ext::doppler-velocity)
              :void
              (%al.ext::value %al.ext::float))

(declaim (inline %al.ext::effectf))

(cffi:defcfun ("alEffectf" %al.ext::effectf)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::fl-value %al.ext::float))

(declaim (inline %al.ext::effectfv))

(cffi:defcfun ("alEffectfv" %al.ext::effectfv)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::effecti))

(cffi:defcfun ("alEffecti" %al.ext::effecti)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::i-value %al.ext::int))

(declaim (inline %al.ext::effectiv))

(cffi:defcfun ("alEffectiv" %al.ext::effectiv)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::enable))

(cffi:defcfun ("alEnable" %al.ext::enable)
              :void
              (%al.ext::capability %al.ext::enum))

(cffi:defctype %al.ext::eventproc (claw-utils:claw-pointer :void))

(declaim (inline %al.ext::event-callback))

(cffi:defcfun ("alEventCallbackSOFT" %al.ext::event-callback)
              :void
              (%al.ext::callback %al.ext::eventproc)
              (%al.ext::user-param (claw-utils:claw-pointer :void)))

(cffi:defctype %al.ext::boolean :char)

(declaim (inline %al.ext::event-control))

(cffi:defcfun ("alEventControlSOFT" %al.ext::event-control)
              :void
              (%al.ext::count %al.ext::sizei)
              (%al.ext::types
               (claw-utils:claw-pointer %al.ext::enum))
              (%al.ext::enable %al.ext::boolean))

(declaim (inline %al.ext::filterf))

(cffi:defcfun ("alFilterf" %al.ext::filterf)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::fl-value %al.ext::float))

(declaim (inline %al.ext::filterfv))

(cffi:defcfun ("alFilterfv" %al.ext::filterfv)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::filteri))

(cffi:defcfun ("alFilteri" %al.ext::filteri)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::i-value %al.ext::int))

(declaim (inline %al.ext::filteriv))

(cffi:defcfun ("alFilteriv" %al.ext::filteriv)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::gen-auxiliary-effect-slots))

(cffi:defcfun ("alGenAuxiliaryEffectSlots"
               %al.ext::gen-auxiliary-effect-slots)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::effectslots
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::gen-buffers))

(cffi:defcfun ("alGenBuffers" %al.ext::gen-buffers)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::buffers
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::gen-effects))

(cffi:defcfun ("alGenEffects" %al.ext::gen-effects)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::effects
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::gen-filters))

(cffi:defcfun ("alGenFilters" %al.ext::gen-filters)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::filters
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::gen-sources))

(cffi:defcfun ("alGenSources" %al.ext::gen-sources)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::get-auxiliary-effect-slotf))

(cffi:defcfun ("alGetAuxiliaryEffectSlotf"
               %al.ext::get-auxiliary-effect-slotf)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-auxiliary-effect-slotfv))

(cffi:defcfun ("alGetAuxiliaryEffectSlotfv"
               %al.ext::get-auxiliary-effect-slotfv)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-auxiliary-effect-sloti))

(cffi:defcfun ("alGetAuxiliaryEffectSloti"
               %al.ext::get-auxiliary-effect-sloti)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-value
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-auxiliary-effect-slotiv))

(cffi:defcfun ("alGetAuxiliaryEffectSlotiv"
               %al.ext::get-auxiliary-effect-slotiv)
              :void
              (%al.ext::effectslot %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-boolean))

(cffi:defcfun ("alGetBoolean" %al.ext::get-boolean)
              %al.ext::boolean
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-booleanv))

(cffi:defcfun ("alGetBooleanv" %al.ext::get-booleanv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values claw-utils:claw-string))

(declaim (inline %al.ext::get-buffer3f))

(cffi:defcfun ("alGetBuffer3f" %al.ext::get-buffer3f)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-buffer3i))

(cffi:defcfun ("alGetBuffer3i" %al.ext::get-buffer3i)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-buffer-samples))

(cffi:defcfun ("alGetBufferSamplesSOFT" %al.ext::get-buffer-samples)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::offset %al.ext::sizei)
              (%al.ext::samples %al.ext::sizei)
              (%al.ext::channels %al.ext::enum)
              (%al.ext::type %al.ext::enum)
              (%al.ext::data (claw-utils:claw-pointer %al.ext::void)))

(declaim (inline %al.ext::get-bufferf))

(cffi:defcfun ("alGetBufferf" %al.ext::get-bufferf)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-bufferfv))

(cffi:defcfun ("alGetBufferfv" %al.ext::get-bufferfv)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-bufferi))

(cffi:defcfun ("alGetBufferi" %al.ext::get-bufferi)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-bufferiv))

(cffi:defcfun ("alGetBufferiv" %al.ext::get-bufferiv)
              :void
              (%al.ext::buffer %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(cffi:defctype %al.ext::double :double)

(declaim (inline %al.ext::get-double))

(cffi:defcfun ("alGetDouble" %al.ext::get-double)
              %al.ext::double
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-doublev))

(cffi:defcfun ("alGetDoublev" %al.ext::get-doublev)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::double)))

(declaim (inline %al.ext::get-effectf))

(cffi:defcfun ("alGetEffectf" %al.ext::get-effectf)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-effectfv))

(cffi:defcfun ("alGetEffectfv" %al.ext::get-effectfv)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-effecti))

(cffi:defcfun ("alGetEffecti" %al.ext::get-effecti)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-value
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-effectiv))

(cffi:defcfun ("alGetEffectiv" %al.ext::get-effectiv)
              :void
              (%al.ext::effect %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(cffi:defctype %al.ext::char :char)

(declaim (inline %al.ext::get-enum-value))

(cffi:defcfun ("alGetEnumValue" %al.ext::get-enum-value)
              %al.ext::enum
              (%al.ext::ename claw-utils:claw-string))

(declaim (inline %al.ext::get-error))

(cffi:defcfun ("alGetError" %al.ext::get-error) %al.ext::enum)

(declaim (inline %al.ext::get-filterf))

(cffi:defcfun ("alGetFilterf" %al.ext::get-filterf)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-filterfv))

(cffi:defcfun ("alGetFilterfv" %al.ext::get-filterfv)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pfl-values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-filteri))

(cffi:defcfun ("alGetFilteri" %al.ext::get-filteri)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-value
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-filteriv))

(cffi:defcfun ("alGetFilteriv" %al.ext::get-filteriv)
              :void
              (%al.ext::filter %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::pi-values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-float))

(cffi:defcfun ("alGetFloat" %al.ext::get-float)
              %al.ext::float
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-floatv))

(cffi:defcfun ("alGetFloatv" %al.ext::get-floatv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-integer))

(cffi:defcfun ("alGetInteger" %al.ext::get-integer)
              %al.ext::int
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-integerv))

(cffi:defcfun ("alGetIntegerv" %al.ext::get-integerv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-listener3f))

(cffi:defcfun ("alGetListener3f" %al.ext::get-listener3f)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-listener3i))

(cffi:defcfun ("alGetListener3i" %al.ext::get-listener3i)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-listenerf))

(cffi:defcfun ("alGetListenerf" %al.ext::get-listenerf)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-listenerfv))

(cffi:defcfun ("alGetListenerfv" %al.ext::get-listenerfv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-listeneri))

(cffi:defcfun ("alGetListeneri" %al.ext::get-listeneri)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-listeneriv))

(cffi:defcfun ("alGetListeneriv" %al.ext::get-listeneriv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-pointer))

(cffi:defcfun ("alGetPointerSOFT" %al.ext::get-pointer)
              (claw-utils:claw-pointer :void)
              (%al.ext::pname %al.ext::enum))

(declaim (inline %al.ext::get-pointerv))

(cffi:defcfun ("alGetPointervSOFT" %al.ext::get-pointerv)
              :void
              (%al.ext::pname %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer
                (claw-utils:claw-pointer :void))))

(declaim (inline %al.ext::get-proc-address))

(cffi:defcfun ("alGetProcAddress" %al.ext::get-proc-address)
              (claw-utils:claw-pointer :void)
              (%al.ext::fname claw-utils:claw-string))

(declaim (inline %al.ext::get-source3d))

(cffi:defcfun ("alGetSource3dSOFT" %al.ext::get-source3d)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::double))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::double))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::double)))

(declaim (inline %al.ext::get-source3f))

(cffi:defcfun ("alGetSource3f" %al.ext::get-source3f)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-source3i))

(cffi:defcfun ("alGetSource3i" %al.ext::get-source3i)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::int))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::int)))

(cffi:defctype %al.ext::int64 :long)

(declaim (inline %al.ext::get-source3i64))

(cffi:defcfun ("alGetSource3i64SOFT" %al.ext::get-source3i64)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1
               (claw-utils:claw-pointer %al.ext::int64))
              (%al.ext::value2
               (claw-utils:claw-pointer %al.ext::int64))
              (%al.ext::value3
               (claw-utils:claw-pointer %al.ext::int64)))

(declaim (inline %al.ext::get-sourced))

(cffi:defcfun ("alGetSourcedSOFT" %al.ext::get-sourced)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value
               (claw-utils:claw-pointer %al.ext::double)))

(declaim (inline %al.ext::get-sourcedv))

(cffi:defcfun ("alGetSourcedvSOFT" %al.ext::get-sourcedv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::double)))

(declaim (inline %al.ext::get-sourcef))

(cffi:defcfun ("alGetSourcef" %al.ext::get-sourcef)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-sourcefv))

(cffi:defcfun ("alGetSourcefv" %al.ext::get-sourcefv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::get-sourcei))

(cffi:defcfun ("alGetSourcei" %al.ext::get-sourcei)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-sourcei64))

(cffi:defcfun ("alGetSourcei64SOFT" %al.ext::get-sourcei64)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value
               (claw-utils:claw-pointer %al.ext::int64)))

(declaim (inline %al.ext::get-sourcei64v))

(cffi:defcfun ("alGetSourcei64vSOFT" %al.ext::get-sourcei64v)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int64)))

(declaim (inline %al.ext::get-sourceiv))

(cffi:defcfun ("alGetSourceiv" %al.ext::get-sourceiv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-string))

(cffi:defcfun ("alGetString" %al.ext::get-string)
              claw-utils:claw-string
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-stringi))

(cffi:defcfun ("alGetStringiSOFT" %al.ext::get-stringi)
              claw-utils:claw-string
              (%al.ext::pname %al.ext::enum)
              (%al.ext::index %al.ext::sizei))

(declaim (inline %al.ext::is-auxiliary-effect-slot))

(cffi:defcfun ("alIsAuxiliaryEffectSlot"
               %al.ext::is-auxiliary-effect-slot)
              %al.ext::boolean
              (%al.ext::effectslot %al.ext::uint))

(declaim (inline %al.ext::is-buffer))

(cffi:defcfun ("alIsBuffer" %al.ext::is-buffer)
              %al.ext::boolean
              (%al.ext::buffer %al.ext::uint))

(declaim (inline %al.ext::is-buffer-format-supported))

(cffi:defcfun ("alIsBufferFormatSupportedSOFT"
               %al.ext::is-buffer-format-supported)
              %al.ext::boolean
              (%al.ext::format %al.ext::enum))

(declaim (inline %al.ext::is-effect))

(cffi:defcfun ("alIsEffect" %al.ext::is-effect)
              %al.ext::boolean
              (%al.ext::effect %al.ext::uint))

(declaim (inline %al.ext::is-enabled))

(cffi:defcfun ("alIsEnabled" %al.ext::is-enabled)
              %al.ext::boolean
              (%al.ext::capability %al.ext::enum))

(declaim (inline %al.ext::is-extension-present))

(cffi:defcfun ("alIsExtensionPresent" %al.ext::is-extension-present)
              %al.ext::boolean
              (%al.ext::extname claw-utils:claw-string))

(declaim (inline %al.ext::is-filter))

(cffi:defcfun ("alIsFilter" %al.ext::is-filter)
              %al.ext::boolean
              (%al.ext::filter %al.ext::uint))

(declaim (inline %al.ext::is-source))

(cffi:defcfun ("alIsSource" %al.ext::is-source)
              %al.ext::boolean
              (%al.ext::source %al.ext::uint))

(declaim (inline %al.ext::listener3f))

(cffi:defcfun ("alListener3f" %al.ext::listener3f)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::float)
              (%al.ext::value2 %al.ext::float)
              (%al.ext::value3 %al.ext::float))

(declaim (inline %al.ext::listener3i))

(cffi:defcfun ("alListener3i" %al.ext::listener3i)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::int)
              (%al.ext::value2 %al.ext::int)
              (%al.ext::value3 %al.ext::int))

(declaim (inline %al.ext::listenerf))

(cffi:defcfun ("alListenerf" %al.ext::listenerf)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::float))

(declaim (inline %al.ext::listenerfv))

(cffi:defcfun ("alListenerfv" %al.ext::listenerfv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::listeneri))

(cffi:defcfun ("alListeneri" %al.ext::listeneri)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::int))

(declaim (inline %al.ext::listeneriv))

(cffi:defcfun ("alListeneriv" %al.ext::listeneriv)
              :void
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::process-updates))

(cffi:defcfun ("alProcessUpdatesSOFT" %al.ext::process-updates) :void)

(cffi:defctype %al.ext::lpalfoldbackcallback
               (claw-utils:claw-pointer :void))

(declaim (inline %al.ext::request-foldback-start))

(cffi:defcfun ("alRequestFoldbackStart"
               %al.ext::request-foldback-start)
              :void
              (%al.ext::mode %al.ext::enum)
              (%al.ext::count %al.ext::sizei)
              (%al.ext::length %al.ext::sizei)
              (%al.ext::mem (claw-utils:claw-pointer %al.ext::float))
              (%al.ext::callback %al.ext::lpalfoldbackcallback))

(declaim (inline %al.ext::request-foldback-stop))

(cffi:defcfun ("alRequestFoldbackStop"
               %al.ext::request-foldback-stop)
              :void)

(declaim (inline %al.ext::source3d))

(cffi:defcfun ("alSource3dSOFT" %al.ext::source3d)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::double)
              (%al.ext::value2 %al.ext::double)
              (%al.ext::value3 %al.ext::double))

(declaim (inline %al.ext::source3f))

(cffi:defcfun ("alSource3f" %al.ext::source3f)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::float)
              (%al.ext::value2 %al.ext::float)
              (%al.ext::value3 %al.ext::float))

(declaim (inline %al.ext::source3i))

(cffi:defcfun ("alSource3i" %al.ext::source3i)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::int)
              (%al.ext::value2 %al.ext::int)
              (%al.ext::value3 %al.ext::int))

(declaim (inline %al.ext::source3i64))

(cffi:defcfun ("alSource3i64SOFT" %al.ext::source3i64)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value1 %al.ext::int64)
              (%al.ext::value2 %al.ext::int64)
              (%al.ext::value3 %al.ext::int64))

(declaim (inline %al.ext::source-pause))

(cffi:defcfun ("alSourcePause" %al.ext::source-pause)
              :void
              (%al.ext::source %al.ext::uint))

(declaim (inline %al.ext::source-pausev))

(cffi:defcfun ("alSourcePausev" %al.ext::source-pausev)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::source-play))

(cffi:defcfun ("alSourcePlay" %al.ext::source-play)
              :void
              (%al.ext::source %al.ext::uint))

(declaim (inline %al.ext::source-playv))

(cffi:defcfun ("alSourcePlayv" %al.ext::source-playv)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::source-queue-buffers))

(cffi:defcfun ("alSourceQueueBuffers" %al.ext::source-queue-buffers)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::nb %al.ext::sizei)
              (%al.ext::buffers
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::source-rewind))

(cffi:defcfun ("alSourceRewind" %al.ext::source-rewind)
              :void
              (%al.ext::source %al.ext::uint))

(declaim (inline %al.ext::source-rewindv))

(cffi:defcfun ("alSourceRewindv" %al.ext::source-rewindv)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::source-stop))

(cffi:defcfun ("alSourceStop" %al.ext::source-stop)
              :void
              (%al.ext::source %al.ext::uint))

(declaim (inline %al.ext::source-stopv))

(cffi:defcfun ("alSourceStopv" %al.ext::source-stopv)
              :void
              (%al.ext::n %al.ext::sizei)
              (%al.ext::sources
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::source-unqueue-buffers))

(cffi:defcfun ("alSourceUnqueueBuffers"
               %al.ext::source-unqueue-buffers)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::nb %al.ext::sizei)
              (%al.ext::buffers
               (claw-utils:claw-pointer %al.ext::uint)))

(declaim (inline %al.ext::sourced))

(cffi:defcfun ("alSourcedSOFT" %al.ext::sourced)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::double))

(declaim (inline %al.ext::sourcedv))

(cffi:defcfun ("alSourcedvSOFT" %al.ext::sourcedv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::double)))

(declaim (inline %al.ext::sourcef))

(cffi:defcfun ("alSourcef" %al.ext::sourcef)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::float))

(declaim (inline %al.ext::sourcefv))

(cffi:defcfun ("alSourcefv" %al.ext::sourcefv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::float)))

(declaim (inline %al.ext::sourcei))

(cffi:defcfun ("alSourcei" %al.ext::sourcei)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::int))

(declaim (inline %al.ext::sourcei64))

(cffi:defcfun ("alSourcei64SOFT" %al.ext::sourcei64)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::value %al.ext::int64))

(declaim (inline %al.ext::sourcei64v))

(cffi:defcfun ("alSourcei64vSOFT" %al.ext::sourcei64v)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int64)))

(declaim (inline %al.ext::sourceiv))

(cffi:defcfun ("alSourceiv" %al.ext::sourceiv)
              :void
              (%al.ext::source %al.ext::uint)
              (%al.ext::param %al.ext::enum)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::speed-of-sound))

(cffi:defcfun ("alSpeedOfSound" %al.ext::speed-of-sound)
              :void
              (%al.ext::value %al.ext::float))

(cffi:defctype %al.ext::boolean :char)

(cffi:defcstruct (%al.ext::device :size 0))

(cffi:defctype %al.ext::device (:struct %al.ext::device))

(declaim (inline %al.ext::capture-close-device))

(cffi:defcfun ("alcCaptureCloseDevice" %al.ext::capture-close-device)
              %al.ext::boolean
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(cffi:defctype %al.ext::char :char)

(cffi:defctype %al.ext::uint :unsigned-int)

(cffi:defctype %al.ext::enum :int)

(cffi:defctype %al.ext::sizei :int)

(declaim (inline %al.ext::capture-open-device))

(cffi:defcfun ("alcCaptureOpenDevice" %al.ext::capture-open-device)
              (claw-utils:claw-pointer %al.ext::device)
              (%al.ext::devicename claw-utils:claw-string)
              (%al.ext::frequency %al.ext::uint)
              (%al.ext::format %al.ext::enum)
              (%al.ext::buffersize %al.ext::sizei))

(cffi:defctype %al.ext::void :void)

(declaim (inline %al.ext::capture-samples))

(cffi:defcfun ("alcCaptureSamples" %al.ext::capture-samples)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::buffer
               (claw-utils:claw-pointer %al.ext::void))
              (%al.ext::samples %al.ext::sizei))

(declaim (inline %al.ext::capture-start))

(cffi:defcfun ("alcCaptureStart" %al.ext::capture-start)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(declaim (inline %al.ext::capture-stop))

(cffi:defcfun ("alcCaptureStop" %al.ext::capture-stop)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(declaim (inline %al.ext::close-device))

(cffi:defcfun ("alcCloseDevice" %al.ext::close-device)
              %al.ext::boolean
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(cffi:defcstruct (%al.ext::context :size 0))

(cffi:defctype %al.ext::context (:struct %al.ext::context))

(cffi:defctype %al.ext::int :int)

(declaim (inline %al.ext::create-context))

(cffi:defcfun ("alcCreateContext" %al.ext::create-context)
              (claw-utils:claw-pointer %al.ext::context)
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::attrlist
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::destroy-context))

(cffi:defcfun ("alcDestroyContext" %al.ext::destroy-context)
              :void
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(declaim (inline %al.ext::device-pause))

(cffi:defcfun ("alcDevicePauseSOFT" %al.ext::device-pause)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(declaim (inline %al.ext::device-resume))

(cffi:defcfun ("alcDeviceResumeSOFT" %al.ext::device-resume)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(declaim (inline %al.ext::get-contexts-device))

(cffi:defcfun ("alcGetContextsDevice" %al.ext::get-contexts-device)
              (claw-utils:claw-pointer %al.ext::device)
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(declaim (inline %al.ext::get-current-context))

(cffi:defcfun ("alcGetCurrentContext" %al.ext::get-current-context)
              (claw-utils:claw-pointer %al.ext::context))

(declaim (inline %al.ext::get-enum-value))

(cffi:defcfun ("alcGetEnumValue" %al.ext::get-enum-value)
              %al.ext::enum
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::enumname claw-utils:claw-string))

(declaim (inline %al.ext::get-error))

(cffi:defcfun ("alcGetError" %al.ext::get-error)
              %al.ext::enum
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device)))

(cffi:defctype %al.ext::int64 :long)

(declaim (inline %al.ext::get-integer64v))

(cffi:defcfun ("alcGetInteger64vSOFT" %al.ext::get-integer64v)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::pname %al.ext::enum)
              (%al.ext::size %al.ext::sizei)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int64)))

(declaim (inline %al.ext::get-integerv))

(cffi:defcfun ("alcGetIntegerv" %al.ext::get-integerv)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::param %al.ext::enum)
              (%al.ext::size %al.ext::sizei)
              (%al.ext::values
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::get-proc-address))

(cffi:defcfun ("alcGetProcAddress" %al.ext::get-proc-address)
              (claw-utils:claw-pointer %al.ext::void)
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::funcname claw-utils:claw-string))

(declaim (inline %al.ext::get-string))

(cffi:defcfun ("alcGetString" %al.ext::get-string)
              claw-utils:claw-string
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::param %al.ext::enum))

(declaim (inline %al.ext::get-stringi))

(cffi:defcfun ("alcGetStringiSOFT" %al.ext::get-stringi)
              claw-utils:claw-string
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::param-name %al.ext::enum)
              (%al.ext::index %al.ext::sizei))

(declaim (inline %al.ext::get-thread-context))

(cffi:defcfun ("alcGetThreadContext" %al.ext::get-thread-context)
              (claw-utils:claw-pointer %al.ext::context))

(declaim (inline %al.ext::is-extension-present))

(cffi:defcfun ("alcIsExtensionPresent" %al.ext::is-extension-present)
              %al.ext::boolean
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::extname claw-utils:claw-string))

(declaim (inline %al.ext::is-render-format-supported))

(cffi:defcfun ("alcIsRenderFormatSupportedSOFT"
               %al.ext::is-render-format-supported)
              %al.ext::boolean
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::freq %al.ext::sizei)
              (%al.ext::channels %al.ext::enum)
              (%al.ext::type %al.ext::enum))

(declaim (inline %al.ext::loopback-open-device))

(cffi:defcfun ("alcLoopbackOpenDeviceSOFT"
               %al.ext::loopback-open-device)
              (claw-utils:claw-pointer %al.ext::device)
              (%al.ext::device-name claw-utils:claw-string))

(declaim (inline %al.ext::make-context-current))

(cffi:defcfun ("alcMakeContextCurrent" %al.ext::make-context-current)
              %al.ext::boolean
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(declaim (inline %al.ext::open-device))

(cffi:defcfun ("alcOpenDevice" %al.ext::open-device)
              (claw-utils:claw-pointer %al.ext::device)
              (%al.ext::devicename claw-utils:claw-string))

(declaim (inline %al.ext::process-context))

(cffi:defcfun ("alcProcessContext" %al.ext::process-context)
              :void
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(declaim (inline %al.ext::render-samples))

(cffi:defcfun ("alcRenderSamplesSOFT" %al.ext::render-samples)
              :void
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::buffer
               (claw-utils:claw-pointer %al.ext::void))
              (%al.ext::samples %al.ext::sizei))

(declaim (inline %al.ext::reset-device))

(cffi:defcfun ("alcResetDeviceSOFT" %al.ext::reset-device)
              %al.ext::boolean
              (%al.ext::device
               (claw-utils:claw-pointer %al.ext::device))
              (%al.ext::attribs
               (claw-utils:claw-pointer %al.ext::int)))

(declaim (inline %al.ext::set-thread-context))

(cffi:defcfun ("alcSetThreadContext" %al.ext::set-thread-context)
              %al.ext::boolean
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(declaim (inline %al.ext::suspend-context))

(cffi:defcfun ("alcSuspendContext" %al.ext::suspend-context)
              :void
              (%al.ext::context
               (claw-utils:claw-pointer %al.ext::context)))

(cffi:defcstruct (%al.ext::|C:@SA@EFXEAXREVERBPROPERTIES| :size 108)
                 (%al.ext::fl-density :float :offset 0)
                 (%al.ext::fl-diffusion :float :offset 4)
                 (%al.ext::fl-gain :float :offset 8)
                 (%al.ext::fl-gain-hf :float :offset 12)
                 (%al.ext::fl-gain-lf :float :offset 16)
                 (%al.ext::fl-decay-time :float :offset 20)
                 (%al.ext::fl-decay-hf-ratio :float :offset 24)
                 (%al.ext::fl-decay-lf-ratio :float :offset 28)
                 (%al.ext::fl-reflections-gain :float :offset 32)
                 (%al.ext::fl-reflections-delay :float :offset 36)
                 (%al.ext::fl-reflections-pan :float :count 3 :offset
                  40)
                 (%al.ext::fl-late-reverb-gain :float :offset 52)
                 (%al.ext::fl-late-reverb-delay :float :offset 56)
                 (%al.ext::fl-late-reverb-pan :float :count 3 :offset
                  60)
                 (%al.ext::fl-echo-time :float :offset 72)
                 (%al.ext::fl-echo-depth :float :offset 76)
                 (%al.ext::fl-modulation-time :float :offset 80)
                 (%al.ext::fl-modulation-depth :float :offset 84)
                 (%al.ext::fl-air-absorption-gain-hf :float :offset
                  88)
                 (%al.ext::fl-hf-reference :float :offset 92)
                 (%al.ext::fl-lf-reference :float :offset 96)
                 (%al.ext::fl-room-rolloff-factor :float :offset 100)
                 (%al.ext::i-decay-hf-limit :int :offset 104))

(cffi:defctype %al.ext::eaxreverbproperties
               (:struct %al.ext::|C:@SA@EFXEAXREVERBPROPERTIES|))

(cffi:defctype %al.ext::byte :char)

(cffi:defctype %al.ext::short :short)

(cffi:defctype %al.ext::ubyte :unsigned-char)

(cffi:defctype %al.ext::ushort :unsigned-short)

(cffi:defctype %al.ext::lpalbuffer3f (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbuffer3i (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbufferdata
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbufferf (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbufferfv (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbufferi (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalbufferiv (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldeletebuffers
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldeletesources
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldisable (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldistancemodel
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldopplerfactor
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpaldopplervelocity
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalenable (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgenbuffers
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgensources
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetboolean
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbooleanv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbuffer3f
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbuffer3i
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbufferf
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbufferfv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbufferi
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetbufferiv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetdouble (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetdoublev
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetenumvalue
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgeterror (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetfloat (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetfloatv (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetinteger
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetintegerv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlistener3f
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlistener3i
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlistenerf
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlistenerfv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlisteneri
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetlisteneriv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetprocaddress
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsource3f
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsource3i
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsourcef
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsourcefv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsourcei
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetsourceiv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalgetstring (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalisbuffer (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalisenabled (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalisextensionpresent
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalissource (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallistener3f
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallistener3i
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallistenerf (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallistenerfv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallisteneri (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpallisteneriv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsource3f (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsource3i (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcef (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcefv (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcei (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourceiv (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcepause
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcepausev
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourceplay
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourceplayv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcequeuebuffers
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcerewind
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcerewindv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcestop
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourcestopv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalsourceunqueuebuffers
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalspeedofsound
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::byte :char)

(cffi:defctype %al.ext::double :double)

(cffi:defctype %al.ext::float :float)

(cffi:defctype %al.ext::short :short)

(cffi:defctype %al.ext::ubyte :unsigned-char)

(cffi:defctype %al.ext::ushort :unsigned-short)

(cffi:defctype %al.ext::lpalccaptureclosedevice
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalccaptureopendevice
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalccapturesamples
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalccapturestart
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalccapturestop
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcclosedevice
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalccreatecont
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcdestroycont
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetcontextsdevice
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetcurrentcont
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetenumvalue
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgeterror (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetintegerv
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetprocaddress
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcgetstring
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcisextensionpresent
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcmakecontextcurrent
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcopendevice
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcprocesscont
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::lpalcsuspendcont
               (claw-utils:claw-pointer :void))

(cffi:defctype %al.ext::uint64 :unsigned-long)

(cffi:defctype %al.ext::uint64 :unsigned-long)

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export '%al.ext::+eaxreverb-max-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+effect-dedicated-low-frequency-effect+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-longpassage+ :%al.ext)
  (export '%al.ext::+reverb-min-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-decay-hfratio+ :%al.ext)
  (export '%al.ext::fl-reflections-pan :%al.ext)
  (export '%al.ext::+eaxreverb-max-decay-lfratio+ :%al.ext)
  (export '%al.ext::is-buffer-format-supported :%al.ext)
  (export '%al.ext::+stereo-angles+ :%al.ext)
  (export '%al.ext::+reverb-min-gain+ :%al.ext)
  (export '%al.ext::+ring-modulator-default-waveform+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+acn+ :%al.ext)
  (export '%al.ext::+chorus-rate+ :%al.ext)
  (export '%al.ext::+soft-source-spatialize+ :%al.ext)
  (export '%al.ext::+format-channels+ :%al.ext)
  (export '%al.ext::+ext-bformat+ :%al.ext)
  (export '%al.ext::fl-air-absorption-gain-hf :%al.ext)
  (export '%al.ext::+reverb-preset-outdoors-rollingplains+ :%al.ext)
  (export '%al.ext::+chorus-depth+ :%al.ext)
  (export '%al.ext::fl-echo-time :%al.ext)
  (export '%al.ext::+reverb-preset-sport-squashcourt+ :%al.ext)
  (export '%al.ext::+7point1-8+ :%al.ext)
  (export '%al.ext::+echo-max-feedback+ :%al.ext)
  (export '%al.ext::+vocal-morpher-min-phonemeb-coarse-tuning+
          :%al.ext)
  (export '%al.ext::boolean :%al.ext)
  (export '%al.ext::+effect-chorus+ :%al.ext)
  (export '%al.ext::+distortion-eqbandwidth+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-commentator+ :%al.ext)
  (export '%al.ext::+eaxreverb-late-reverb-pan+ :%al.ext)
  (export '%al.ext::+chorus-min-phase+ :%al.ext)
  (export '%al.ext::+autowah-default-release-time+ :%al.ext)
  (export '%al.ext::source-playv :%al.ext)
  (export '%al.ext::speed-of-sound :%al.ext)
  (export '%al.ext::lpalsourceplay :%al.ext)
  (export '%al.ext::bufferfv :%al.ext)
  (export '%al.ext::+reverb-default-gain+ :%al.ext)
  (export '%al.ext::+autowah-min-release-time+ :%al.ext)
  (export '%al.ext::+byte-rw-offsets+ :%al.ext)
  (export '%al.ext::+cone-outer-angle+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-cupboard+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-reflections-gain+ :%al.ext)
  (export '%al.ext::+equalizer-max-high-gain+ :%al.ext)
  (export '%al.ext::lpalbuffer3f :%al.ext)
  (export '%al.ext::get-booleanv :%al.ext)
  (export '%al.ext::+eaxreverb-decay-hflimit+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-gain+ :%al.ext)
  (export '%al.ext::event-control :%al.ext)
  (export '%al.ext::lpalgetsource3f :%al.ext)
  (export '%al.ext::+invalid-device+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-er+ :%al.ext)
  (export '%al.ext::+flanger-min-waveform+ :%al.ext)
  (export '%al.ext::close-device :%al.ext)
  (export '%al.ext::uint :%al.ext)
  (export '%al.ext::+reverb-preset-psychotic+ :%al.ext)
  (export '%al.ext::+size+ :%al.ext)
  (export '%al.ext::+autowah-min-peak-gain+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-g+ :%al.ext)
  (export '%al.ext::+reverb-preset-outdoors-creek+ :%al.ext)
  (export '%al.ext::auxiliary-effect-slotfv :%al.ext)
  (export '%al.ext::lpalsourceunqueuebuffers :%al.ext)
  (export '%al.ext::+invalid-value+ :%al.ext)
  (export '%al.ext::source-stopv :%al.ext)
  (export '%al.ext::+format-stereo-ima4+ :%al.ext)
  (export '%al.ext::+drop-unmatched+ :%al.ext)
  (export '%al.ext::+chorus-default-rate+ :%al.ext)
  (export '%al.ext::+ext-mulaw+ :%al.ext)
  (export '%al.ext::+ext-efx-name+ :%al.ext)
  (export '%al.ext::lpallistener3f :%al.ext)
  (export '%al.ext::+reverb-decay-hflimit+ :%al.ext)
  (export '%al.ext::+flanger-default-rate+ :%al.ext)
  (export '%al.ext::+bandpass-max-gainhf+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-diffusion+ :%al.ext)
  (export '%al.ext::+equalizer-mid1-width+ :%al.ext)
  (export '%al.ext::+%h+ :%al.ext)
  (export '%al.ext::+reverb-default-decay-time+ :%al.ext)
  (export '%al.ext::+reverb-preset-arena+ :%al.ext)
  (export '%al.ext::+eaxreverb-echo-time+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-fullgrandstand+ :%al.ext)
  (export '%al.ext::get-pointer :%al.ext)
  (export '%al.ext::+eaxreverb-max-echo-depth+ :%al.ext)
  (export '%al.ext::+reverb-min-density+ :%al.ext)
  (export '%al.ext::gen-sources :%al.ext)
  (export '%al.ext::+pitch-shifter-min-coarse-tune+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-cupboard+ :%al.ext)
  (export '%al.ext::+vocal-morpher-default-waveform+ :%al.ext)
  (export '%al.ext::+format-ima-adpcm-stereo16+ :%al.ext)
  (export '%al.ext::+format-rear-mulaw+ :%al.ext)
  (export '%al.ext::is-extension-present :%al.ext)
  (export '%al.ext::+default-auxiliary-send-filter-gainhf-auto+
          :%al.ext)
  (export '%al.ext::+illegal-enum+ :%al.ext)
  (export '%al.ext::+invalid+ :%al.ext)
  (export '%al.ext::source-stop :%al.ext)
  (export '%al.ext::+lowpass-min-gainhf+ :%al.ext)
  (export '%al.ext::+soft-source-latency+ :%al.ext)
  (export '%al.ext::+flanger-min-feedback+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-pitgarage+ :%al.ext)
  (export '%al.ext::get-sourcedv :%al.ext)
  (export '%al.ext::lpalcgetcontextsdevice :%al.ext)
  (export '%al.ext::lpalgetlisteneri :%al.ext)
  (export '%al.ext::+eaxreverb-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+linear-distance+ :%al.ext)
  (export '%al.ext::get-error :%al.ext)
  (export '%al.ext::lpalcmakecontextcurrent :%al.ext)
  (export '%al.ext::+internal-format+ :%al.ext)
  (export '%al.ext::+rear16+ :%al.ext)
  (export '%al.ext::source3d :%al.ext)
  (export '%al.ext::get-effectf :%al.ext)
  (export '%al.ext::+doppler-velocity+ :%al.ext)
  (export '%al.ext::+autowah-resonance+ :%al.ext)
  (export '%al.ext::get-effectfv :%al.ext)
  (export '%al.ext::+buffers-queued+ :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-hall+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-hfreference+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-lfreference+ :%al.ext)
  (export '%al.ext::+frequency-shifter-direction-down+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-shortpassage+ :%al.ext)
  (export '%al.ext::+ring-modulator-sinusoid+ :%al.ext)
  (export '%al.ext::+ring-modulator-frequency+ :%al.ext)
  (export '%al.ext::+unsigned-byte+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-decay-lfratio+ :%al.ext)
  (export '%al.ext::+equalizer-default-mid2-gain+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-incar-luxury+ :%al.ext)
  (export '%al.ext::+ring-modulator-square+ :%al.ext)
  (export '%al.ext::+eaxreverb-decay-time+ :%al.ext)
  (export '%al.ext::listener3i :%al.ext)
  (export '%al.ext::+format-wave+ :%al.ext)
  (export '%al.ext::get-filterf :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-shortpassage+
          :%al.ext)
  (export '%al.ext::+equalizer-mid2-gain+ :%al.ext)
  (export '%al.ext::is-filter :%al.ext)
  (export '%al.ext::get-filteri :%al.ext)
  (export '%al.ext::+ext-efx+ :%al.ext)
  (export '%al.ext::buffer3i :%al.ext)
  (export '%al.ext::+highpass-gain+ :%al.ext)
  (export '%al.ext::+effect-flanger+ :%al.ext)
  (export '%al.ext::+format-mono-ima4+ :%al.ext)
  (export '%al.ext::lpallistenerfv :%al.ext)
  (export '%al.ext::+default-filter-order+ :%al.ext)
  (export '%al.ext::lpalbufferf :%al.ext)
  (export '%al.ext::+hrtf-disabled+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-decay-time+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-echo-time+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-echo-time+ :%al.ext)
  (export '%al.ext::+distortion-max-edge+ :%al.ext)
  (export '%al.ext::eventproc :%al.ext)
  (export '%al.ext::lpalsource3i :%al.ext)
  (export '%al.ext::source-queue-buffers :%al.ext)
  (export '%al.ext::+minor-version+ :%al.ext)
  (export '%al.ext::is-effect :%al.ext)
  (export '%al.ext::+reverb-preset-mountains+ :%al.ext)
  (export '%al.ext::+min-auxiliary-send-filter-gain-auto+ :%al.ext)
  (export '%al.ext::+chorus-default-depth+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-late-reverb-gain+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-largeroom+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid1-center+ :%al.ext)
  (export '%al.ext::lpalsourcestopv :%al.ext)
  (export '%al.ext::+format-61chn-mulaw+ :%al.ext)
  (export '%al.ext::lpalcgetintegerv :%al.ext)
  (export '%al.ext::+vocal-morpher-phonemeb+ :%al.ext)
  (export '%al.ext::+source-relative+ :%al.ext)
  (export '%al.ext::fl-decay-hf-ratio :%al.ext)
  (export '%al.ext::+vendor+ :%al.ext)
  (export '%al.ext::+ring-modulator-max-highpass-cutoff+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-density+ :%al.ext)
  (export '%al.ext::+direct-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::+default-cone-outer-gainhf+ :%al.ext)
  (export '%al.ext::+effect-dedicated-dialogue+ :%al.ext)
  (export '%al.ext::+sec-offset+ :%al.ext)
  (export '%al.ext::lpalgetsourceiv :%al.ext)
  (export '%al.ext::lpalsourcepausev :%al.ext)
  (export '%al.ext::lpallisteneriv :%al.ext)
  (export '%al.ext::lpallistenerf :%al.ext)
  (export '%al.ext::+equalizer-low-gain+ :%al.ext)
  (export '%al.ext::get-float :%al.ext)
  (export '%al.ext::+event-type-disconnected+ :%al.ext)
  (export '%al.ext::lpalcgetstring :%al.ext)
  (export '%al.ext::+vocal-morpher-max-phonemea+ :%al.ext)
  (export '%al.ext::fl-modulation-time :%al.ext)
  (export '%al.ext::+quad+ :%al.ext)
  (export '%al.ext::+unused+ :%al.ext)
  (export '%al.ext::lpalgetboolean :%al.ext)
  (export '%al.ext::+eaxreverbproperties-defined+ :%al.ext)
  (export '%al.ext::capture-close-device :%al.ext)
  (export '%al.ext::gen-filters :%al.ext)
  (export '%al.ext::+reverb-default-diffusion+ :%al.ext)
  (export '%al.ext::+playing+ :%al.ext)
  (export '%al.ext::+format-bformat2d-8+ :%al.ext)
  (export '%al.ext::+hrtf-id+ :%al.ext)
  (export '%al.ext::+format-stereo-mulaw+ :%al.ext)
  (export '%al.ext::+ring-modulator-sawtooth+ :%al.ext)
  (export '%al.ext::lpalcdestroycont :%al.ext)
  (export '%al.ext::+bandpass-default-gainlf+ :%al.ext)
  (export '%al.ext::+bandpass-min-gainhf+ :%al.ext)
  (export '%al.ext::get-listeneri :%al.ext)
  (export '%al.ext::+chorus-max-rate+ :%al.ext)
  (export '%al.ext::+invalid-operation+ :%al.ext)
  (export '%al.ext::sizei :%al.ext)
  (export '%al.ext::+eaxreverb-default-modulation-depth+ :%al.ext)
  (export '%al.ext::+format-bformat2d-float32+ :%al.ext)
  (export '%al.ext::gen-auxiliary-effect-slots :%al.ext)
  (export '%al.ext::+effectslot-gain+ :%al.ext)
  (export '%al.ext::lpalisbuffer :%al.ext)
  (export '%al.ext::+effectslot-null+ :%al.ext)
  (export '%al.ext::+reverb-preset-plain+ :%al.ext)
  (export '%al.ext::+ext-capture+ :%al.ext)
  (export '%al.ext::+equalizer-mid1-gain+ :%al.ext)
  (export '%al.ext::+flanger-max-depth+ :%al.ext)
  (export '%al.ext::+reverb-decay-hfratio+ :%al.ext)
  (export '%al.ext::+source-radius+ :%al.ext)
  (export '%al.ext::+5point1-16+ :%al.ext)
  (export '%al.ext::+reverb-min-decay-hfratio+ :%al.ext)
  (export '%al.ext::device :%al.ext)
  (export '%al.ext::+flanger-max-rate+ :%al.ext)
  (export '%al.ext::+direction+ :%al.ext)
  (export '%al.ext::lpalsourcei :%al.ext)
  (export '%al.ext::lpalccreatecont :%al.ext)
  (export '%al.ext::+echo-damping+ :%al.ext)
  (export '%al.ext::+equalizer-mid2-center+ :%al.ext)
  (export '%al.ext::+filter-bandpass+ :%al.ext)
  (export '%al.ext::+distortion-max-eqbandwidth+ :%al.ext)
  (export '%al.ext::+mono16+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-mediumroom+ :%al.ext)
  (export '%al.ext::+reverb-preset-sport-smallswimmingpool+ :%al.ext)
  (export '%al.ext::+byte+ :%al.ext)
  (export '%al.ext::filterf :%al.ext)
  (export '%al.ext::+soft-loopback+ :%al.ext)
  (export '%al.ext::ubyte :%al.ext)
  (export '%al.ext::lpalgeterror :%al.ext)
  (export '%al.ext::delete-buffers :%al.ext)
  (export '%al.ext::get-listener3f :%al.ext)
  (export '%al.ext::+format-bformat2d-16+ :%al.ext)
  (export '%al.ext::+air-absorption-factor+ :%al.ext)
  (export '%al.ext::+hrtf-status+ :%al.ext)
  (export '%al.ext::+format-mono-alaw+ :%al.ext)
  (export '%al.ext::+compressor-max-onoff+ :%al.ext)
  (export '%al.ext::+effect-vocal-morpher+ :%al.ext)
  (export '%al.ext::+pitch-shifter-max-coarse-tune+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-gainhf+ :%al.ext)
  (export '%al.ext::source3f :%al.ext)
  (export '%al.ext::+min-auxiliary-send-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::get-source3i :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-smallroom+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-courtyard+ :%al.ext)
  (export '%al.ext::is-render-format-supported :%al.ext)
  (export '%al.ext::+reverb-default-late-reverb-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+doppler-factor+ :%al.ext)
  (export '%al.ext::+soft-msadpcm+ :%al.ext)
  (export '%al.ext::+reverb-preset-room+ :%al.ext)
  (export '%al.ext::+frequency+ :%al.ext)
  (export '%al.ext::is-auxiliary-effect-slot :%al.ext)
  (export '%al.ext::+format-mono-float32+ :%al.ext)
  (export '%al.ext::+format-vorbis+ :%al.ext)
  (export '%al.ext::+reverb-density+ :%al.ext)
  (export '%al.ext::+flanger-max-delay+ :%al.ext)
  (export '%al.ext::+compressor-min-onoff+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-diffusion+ :%al.ext)
  (export '%al.ext::+loki-audio-channel+ :%al.ext)
  (export '%al.ext::+extensions+ :%al.ext)
  (export '%al.ext::reset-device :%al.ext)
  (export '%al.ext::+eaxreverb-default-decay-hflimit+ :%al.ext)
  (export '%al.ext::get-listenerfv :%al.ext)
  (export '%al.ext::+vocal-morpher-min-waveform+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-courtyard+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-ao+ :%al.ext)
  (export '%al.ext::+reverb-default-decay-hfratio+ :%al.ext)
  (export '%al.ext::+flanger-delay+ :%al.ext)
  (export '%al.ext::+effect-last-parameter+ :%al.ext)
  (export '%al.ext::+reverb-decay-time+ :%al.ext)
  (export '%al.ext::disable :%al.ext)
  (export '%al.ext::+eaxreverb-default-gain+ :%al.ext)
  (export '%al.ext::fl-modulation-depth :%al.ext)
  (export '%al.ext::+bformat3d+ :%al.ext)
  (export '%al.ext::+equalizer-default-mid1-width+ :%al.ext)
  (export '%al.ext::+frequency-shifter-min-left-direction+ :%al.ext)
  (export '%al.ext::+flanger-default-delay+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-decay-hflimit+ :%al.ext)
  (export '%al.ext::+vocal-morpher-min-phonemeb+ :%al.ext)
  (export '%al.ext::lpalisextensionpresent :%al.ext)
  (export '%al.ext::capture-samples :%al.ext)
  (export '%al.ext::lpallisteneri :%al.ext)
  (export '%al.ext::+reverb-reflections-delay+ :%al.ext)
  (export '%al.ext::get-source3i64 :%al.ext)
  (export '%al.ext::+eaxreverb-decay-hfratio+ :%al.ext)
  (export '%al.ext::+dont-care+ :%al.ext)
  (export '%al.ext::filteriv :%al.ext)
  (export '%al.ext::+eaxreverb-gainlf+ :%al.ext)
  (export '%al.ext::+reverb-preset-underwater+ :%al.ext)
  (export '%al.ext::+position+ :%al.ext)
  (export '%al.ext::+hrtf-required+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+event-callback-function+ :%al.ext)
  (export '%al.ext::+num-hrtf-specifiers+ :%al.ext)
  (export '%al.ext::+reverb-preset-sport-emptystadium+ :%al.ext)
  (export '%al.ext::+eaxreverb-echo-depth+ :%al.ext)
  (export '%al.ext::+bandpass-default-gain+ :%al.ext)
  (export '%al.ext::auxiliary-effect-sloti :%al.ext)
  (export '%al.ext::source-pausev :%al.ext)
  (export '%al.ext::uint64 :%al.ext)
  (export '%al.ext::+pitch-shifter-fine-tune+ :%al.ext)
  (export '%al.ext::+reverb-min-decay-hflimit+ :%al.ext)
  (export '%al.ext::sourcef :%al.ext)
  (export '%al.ext::+distortion-max-gain+ :%al.ext)
  (export '%al.ext::+auto+ :%al.ext)
  (export '%al.ext::lpalgetlistenerf :%al.ext)
  (export '%al.ext::+undetermined+ :%al.ext)
  (export '%al.ext::+equalizer-default-high-gain+ :%al.ext)
  (export '%al.ext::+ring-modulator-highpass-cutoff+ :%al.ext)
  (export '%al.ext::sourcei64 :%al.ext)
  (export '%al.ext::+sample-offset-clock+ :%al.ext)
  (export '%al.ext::+reverb-max-gain+ :%al.ext)
  (export '%al.ext::+min-cone-outer-gainhf+ :%al.ext)
  (export '%al.ext::gen-buffers :%al.ext)
  (export '%al.ext::+chorus-max-feedback+ :%al.ext)
  (export '%al.ext::defer-updates :%al.ext)
  (export '%al.ext::+reverb-max-decay-hflimit+ :%al.ext)
  (export '%al.ext::effectf :%al.ext)
  (export '%al.ext::get-pointerv :%al.ext)
  (export '%al.ext::+autowah-default-attack-time+ :%al.ext)
  (export '%al.ext::+loop-points+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-ae+ :%al.ext)
  (export '%al.ext::get-buffer3f :%al.ext)
  (export '%al.ext::+reverb-preset-prefab-caravan+ :%al.ext)
  (export '%al.ext::lpalgetsource3i :%al.ext)
  (export '%al.ext::buffer-data-static :%al.ext)
  (export '%al.ext::+vocal-morpher-min-rate+ :%al.ext)
  (export '%al.ext::lpalbufferdata :%al.ext)
  (export '%al.ext::+flanger-depth+ :%al.ext)
  (export '%al.ext::+speed-of-sound+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-late-reverb-pan-xyz+ :%al.ext)
  (export '%al.ext::+vocal-morpher-max-phonemeb-coarse-tuning+
          :%al.ext)
  (export '%al.ext::+vocal-morpher-min-phonemea+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-smallroom+ :%al.ext)
  (export '%al.ext::+ring-modulator-max-waveform+ :%al.ext)
  (export '%al.ext::+reverb-gainhf+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-courtyard+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-decay-time+ :%al.ext)
  (export '%al.ext::+reference-distance+ :%al.ext)
  (export '%al.ext::+reverb-preset-sport-gymnasium+ :%al.ext)
  (export '%al.ext::+autowah-max-attack-time+ :%al.ext)
  (export '%al.ext::context :%al.ext)
  (export '%al.ext::+reverb-preset-sport-fullstadium+ :%al.ext)
  (export '%al.ext::int :%al.ext)
  (export '%al.ext::+byte3+ :%al.ext)
  (export '%al.ext::+equalizer-max-low-cutoff+ :%al.ext)
  (export '%al.ext::+gain+ :%al.ext)
  (export '%al.ext::+inverse-distance+ :%al.ext)
  (export '%al.ext::+ext-stereo-angles+ :%al.ext)
  (export '%al.ext::+reverb-preset-dome-tomb+ :%al.ext)
  (export '%al.ext::get-contexts-device :%al.ext)
  (export '%al.ext::+reverb-preset-generic+ :%al.ext)
  (export '%al.ext::+frequency-shifter-default-frequency+ :%al.ext)
  (export '%al.ext::+frequency-shifter-min-frequency+ :%al.ext)
  (export '%al.ext::+ext-mulaw-bformat+ :%al.ext)
  (export '%al.ext::+mono-sources+ :%al.ext)
  (export '%al.ext::+reverb-preset-stoneroom+ :%al.ext)
  (export '%al.ext::+api+ :%al.ext)
  (export '%al.ext::+version-1-0+ :%al.ext)
  (export '%al.ext::+l-attributes+ :%al.ext)
  (export '%al.ext::+autowah-peak-gain+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-hall+ :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-longpassage+
          :%al.ext)
  (export '%al.ext::+soft-buffer-samples+ :%al.ext)
  (export '%al.ext::fl-hf-reference :%al.ext)
  (export '%al.ext::+lowpass-max-gain+ :%al.ext)
  (export '%al.ext::+flanger-max-waveform+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-shortpassage+ :%al.ext)
  (export '%al.ext::+ambisonic-scaling+ :%al.ext)
  (export '%al.ext::+reverb-late-reverb-gain+ :%al.ext)
  (export '%al.ext::listeneriv :%al.ext)
  (export '%al.ext::sourcefv :%al.ext)
  (export '%al.ext::lpalgetbufferiv :%al.ext)
  (export '%al.ext::+eaxreverb-max-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::listener3f :%al.ext)
  (export '%al.ext::lpalissource :%al.ext)
  (export '%al.ext::lpalgetbuffer3f :%al.ext)
  (export '%al.ext::+source-type+ :%al.ext)
  (export '%al.ext::lpalspeedofsound :%al.ext)
  (export '%al.ext::+format-quad-mulaw+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-gainlf+ :%al.ext)
  (export '%al.ext::+chorus-max-depth+ :%al.ext)
  (export '%al.ext::+sample-offset+ :%al.ext)
  (export '%al.ext::lpalcgeterror :%al.ext)
  (export '%al.ext::get-bufferi :%al.ext)
  (export '%al.ext::+frequency-shifter-min-right-direction+ :%al.ext)
  (export '%al.ext::+bandpass-min-gain+ :%al.ext)
  (export '%al.ext::+format-stereo16+ :%al.ext)
  (export '%al.ext::+n3d+ :%al.ext)
  (export '%al.ext::+rear+ :%al.ext)
  (export '%al.ext::+soft-events+ :%al.ext)
  (export '%al.ext::+sync+ :%al.ext)
  (export '%al.ext::fl-late-reverb-delay :%al.ext)
  (export '%al.ext::+reverb-max-diffusion+ :%al.ext)
  (export '%al.ext::+soft-deferred-updates+ :%al.ext)
  (export '%al.ext::+reverb-default-reflections-gain+ :%al.ext)
  (export '%al.ext::+apientry+ :%al.ext)
  (export '%al.ext::lpalcclosedevice :%al.ext)
  (export '%al.ext::get-auxiliary-effect-slotf :%al.ext)
  (export '%al.ext::+soft-device-clock+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-emptygrandstand+ :%al.ext)
  (export '%al.ext::doppler-factor :%al.ext)
  (export '%al.ext::lpalccapturestart :%al.ext)
  (export '%al.ext::+ext-h+ :%al.ext)
  (export '%al.ext::+rolloff-factor+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid1-width+ :%al.ext)
  (export '%al.ext::+reverb-preset-prefab-practiseroom+ :%al.ext)
  (export '%al.ext::lpalsourcefv :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-hall+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-modulation-time+ :%al.ext)
  (export '%al.ext::+reverb-default-reflections-delay+ :%al.ext)
  (export '%al.ext::process-context :%al.ext)
  (export '%al.ext::+reverb-preset-city-museum+ :%al.ext)
  (export '%al.ext::fl-late-reverb-gain :%al.ext)
  (export '%al.ext::get-auxiliary-effect-sloti :%al.ext)
  (export '%al.ext::+effect-ring-modulator+ :%al.ext)
  (export '%al.ext::+hrtf+ :%al.ext)
  (export '%al.ext::+reverb-preset-pipe-resonant+ :%al.ext)
  (export '%al.ext::+eaxreverb-reflections-delay+ :%al.ext)
  (export '%al.ext::+reverb-default-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::float :%al.ext)
  (export '%al.ext::+frequency-shifter-default-left-direction+
          :%al.ext)
  (export '%al.ext::listeneri :%al.ext)
  (export '%al.ext::+max-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::source-rewindv :%al.ext)
  (export '%al.ext::+filter-type+ :%al.ext)
  (export '%al.ext::+default-device-specifier+ :%al.ext)
  (export '%al.ext::fl-decay-time :%al.ext)
  (export '%al.ext::+vocal-morpher-default-phonemea-coarse-tuning+
          :%al.ext)
  (export '%al.ext::+reverb-max-late-reverb-gain+ :%al.ext)
  (export '%al.ext::source3i :%al.ext)
  (export '%al.ext::delete-sources :%al.ext)
  (export '%al.ext::+equalizer-min-mid2-width+ :%al.ext)
  (export '%al.ext::make-context-current :%al.ext)
  (export '%al.ext::+distortion-max-eqcenter+ :%al.ext)
  (export '%al.ext::+flanger-min-rate+ :%al.ext)
  (export '%al.ext::+soft-effect-target+ :%al.ext)
  (export '%al.ext::+distortion-default-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-echo-depth+ :%al.ext)
  (export '%al.ext::+flanger-min-depth+ :%al.ext)
  (export '%al.ext::lpalbuffer3i :%al.ext)
  (export '%al.ext::+bandpass-gainlf+ :%al.ext)
  (export '%al.ext::fl-late-reverb-pan :%al.ext)
  (export '%al.ext::+eaxreverb-min-decay-hfratio+ :%al.ext)
  (export '%al.ext::+distortion-default-edge+ :%al.ext)
  (export '%al.ext::+frequency-shifter-max-left-direction+ :%al.ext)
  (export '%al.ext::+reverb-preset-outdoors-backyard+ :%al.ext)
  (export '%al.ext::int64 :%al.ext)
  (export '%al.ext::+reverb-default-density+ :%al.ext)
  (export '%al.ext::+reverb-max-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+reverb-default-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+frequency-shifter-direction-off+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-cupboard+ :%al.ext)
  (export '%al.ext::+filter-lowpass+ :%al.ext)
  (export '%al.ext::lpaldistancemodel :%al.ext)
  (export '%al.ext::+reverb-preset-pipe-large+ :%al.ext)
  (export '%al.ext::+ring-modulator-max-frequency+ :%al.ext)
  (export '%al.ext::+distortion-min-lowpass-cutoff+ :%al.ext)
  (export '%al.ext::get-listeneriv :%al.ext)
  (export '%al.ext::lpalsourcerewindv :%al.ext)
  (export '%al.ext::filteri :%al.ext)
  (export '%al.ext::delete-auxiliary-effect-slots :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-v+ :%al.ext)
  (export '%al.ext::+max-air-absorption-factor+ :%al.ext)
  (export '%al.ext::+reverb-default-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+ring-modulator-waveform+ :%al.ext)
  (export '%al.ext::+soft-buffer-sub-data+ :%al.ext)
  (export '%al.ext::capture-stop :%al.ext)
  (export '%al.ext::+ext-vorbis+ :%al.ext)
  (export '%al.ext::+ext-prototypes+ :%al.ext)
  (export '%al.ext::+reverb-min-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+linear-distance-clamped+ :%al.ext)
  (export '%al.ext::+vocal-morpher-min-phonemea-coarse-tuning+
          :%al.ext)
  (export '%al.ext::+effect-eaxreverb+ :%al.ext)
  (export '%al.ext::lpalsourceplayv :%al.ext)
  (export '%al.ext::+byte-length+ :%al.ext)
  (export '%al.ext::+eaxreverb-decay-lfratio+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-u+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-hfreference+ :%al.ext)
  (export '%al.ext::+bits+ :%al.ext)
  (export '%al.ext::get-proc-address :%al.ext)
  (export '%al.ext::+effect-first-parameter+ :%al.ext)
  (export '%al.ext::+equalizer-default-low-cutoff+ :%al.ext)
  (export '%al.ext::+highpass-min-gain+ :%al.ext)
  (export '%al.ext::+equalizer-min-high-cutoff+ :%al.ext)
  (export '%al.ext::+reverb-diffusion+ :%al.ext)
  (export '%al.ext::+major-version+ :%al.ext)
  (export '%al.ext::+flanger-default-waveform+ :%al.ext)
  (export '%al.ext::+exponent-distance-clamped+ :%al.ext)
  (export '%al.ext::+chorus-min-delay+ :%al.ext)
  (export '%al.ext::lpalcgetcurrentcont :%al.ext)
  (export '%al.ext::+reverb-preset-drugged+ :%al.ext)
  (export '%al.ext::+reverb-max-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+reverb-min-diffusion+ :%al.ext)
  (export '%al.ext::+filter-last-parameter+ :%al.ext)
  (export '%al.ext::+lowpass-gainhf+ :%al.ext)
  (export '%al.ext::lpaldeletebuffers :%al.ext)
  (export '%al.ext::short :%al.ext)
  (export '%al.ext::enable :%al.ext)
  (export '%al.ext::+reverb-min-late-reverb-gain+ :%al.ext)
  (export '%al.ext::sourceiv :%al.ext)
  (export '%al.ext::+bandpass-min-gainlf+ :%al.ext)
  (export '%al.ext::lpalbufferiv :%al.ext)
  (export '%al.ext::+chorus-max-delay+ :%al.ext)
  (export '%al.ext::bufferiv :%al.ext)
  (export '%al.ext::+eaxreverb-reflections-gain+ :%al.ext)
  (export '%al.ext::+ext-static-buffer+ :%al.ext)
  (export '%al.ext::+format-51chn32+ :%al.ext)
  (export '%al.ext::+format-quad8-loki+ :%al.ext)
  (export '%al.ext::gen-effects :%al.ext)
  (export '%al.ext::+bandpass-gain+ :%al.ext)
  (export '%al.ext::get-boolean :%al.ext)
  (export '%al.ext::+eaxreverb-modulation-depth+ :%al.ext)
  (export '%al.ext::fl-lf-reference :%al.ext)
  (export '%al.ext::+stereo8+ :%al.ext)
  (export '%al.ext::get-thread-context :%al.ext)
  (export '%al.ext::+format-61chn16+ :%al.ext)
  (export '%al.ext::+chorus-min-depth+ :%al.ext)
  (export '%al.ext::lpalgetlistener3f :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-r+ :%al.ext)
  (export '%al.ext::+equalizer-high-cutoff+ :%al.ext)
  (export '%al.ext::+sec-length+ :%al.ext)
  (export '%al.ext::+format-mono16+ :%al.ext)
  (export '%al.ext::sourcei64v :%al.ext)
  (export '%al.ext::+effect-equalizer+ :%al.ext)
  (export '%al.ext::+chorus-default-delay+ :%al.ext)
  (export '%al.ext::+equalizer-min-high-gain+ :%al.ext)
  (export '%al.ext::+vocal-morpher-max-rate+ :%al.ext)
  (export '%al.ext::+pitch-shifter-default-coarse-tune+ :%al.ext)
  (export '%al.ext::+vocal-morpher-rate+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-mediumroom+ :%al.ext)
  (export '%al.ext::lpalgetstring :%al.ext)
  (export '%al.ext::+equalizer-default-mid1-center+ :%al.ext)
  (export '%al.ext::get-filteriv :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-uh+ :%al.ext)
  (export '%al.ext::+vocal-morpher-waveform-sawtooth+ :%al.ext)
  (export '%al.ext::+eaxreverb-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+short+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-incar-sports+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid2-center+ :%al.ext)
  (export '%al.ext::+reverb-max-density+ :%al.ext)
  (export '%al.ext::destroy-context :%al.ext)
  (export '%al.ext::+flanger-rate+ :%al.ext)
  (export '%al.ext::+distance-model+ :%al.ext)
  (export '%al.ext::lpalgetsourcei :%al.ext)
  (export '%al.ext::+frequency-shifter-max-right-direction+ :%al.ext)
  (export '%al.ext::effecti :%al.ext)
  (export '%al.ext::+format-rear8+ :%al.ext)
  (export '%al.ext::+chan-main-loki+ :%al.ext)
  (export '%al.ext::+reverb-preset-sport-largeswimmingpool+ :%al.ext)
  (export '%al.ext::+format-mono-double+ :%al.ext)
  (export '%al.ext::void :%al.ext)
  (export '%al.ext::+chorus-max-waveform+ :%al.ext)
  (export '%al.ext::+looping+ :%al.ext)
  (export '%al.ext::+reverb-default-gainhf+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-reflections-gain+ :%al.ext)
  (export '%al.ext::+no-error+ :%al.ext)
  (export '%al.ext::+connected+ :%al.ext)
  (export '%al.ext::+vocal-morpher-waveform-sinusoid+ :%al.ext)
  (export '%al.ext::capture-start :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-ah+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid2-gain+ :%al.ext)
  (export '%al.ext::delete-filters :%al.ext)
  (export '%al.ext::+format-bformat3d-mulaw+ :%al.ext)
  (export '%al.ext::+reverb-preset-mood-hell+ :%al.ext)
  (export '%al.ext::+sample-rw-offsets+ :%al.ext)
  (export '%al.ext::+highpass-max-gainlf+ :%al.ext)
  (export '%al.ext::fl-gain :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-z+ :%al.ext)
  (export '%al.ext::lpalgensources :%al.ext)
  (export '%al.ext::get-enum-value :%al.ext)
  (export '%al.ext::+stereo16+ :%al.ext)
  (export '%al.ext::+equalizer-default-low-gain+ :%al.ext)
  (export '%al.ext::+reverb-preset-auditorium+ :%al.ext)
  (export '%al.ext::+equalizer-max-low-gain+ :%al.ext)
  (export '%al.ext::+chan-pcm-loki+ :%al.ext)
  (export '%al.ext::+echo-default-damping+ :%al.ext)
  (export '%al.ext::+distortion-lowpass-cutoff+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+format-51chn8+ :%al.ext)
  (export '%al.ext::sourced :%al.ext)
  (export '%al.ext::+echo-max-lrdelay+ :%al.ext)
  (export '%al.ext::lpalcsuspendcont :%al.ext)
  (export '%al.ext::+reverb-min-reflections-delay+ :%al.ext)
  (export '%al.ext::+autowah-min-attack-time+ :%al.ext)
  (export '%al.ext::+foldback-mode-stereo+ :%al.ext)
  (export '%al.ext::fl-decay-lf-ratio :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-alcove+ :%al.ext)
  (export '%al.ext::+max-ambisonic-order+ :%al.ext)
  (export '%al.ext::+equalizer-min-mid1-gain+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid1-gain+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-n+ :%al.ext)
  (export '%al.ext::+reverb-min-decay-time+ :%al.ext)
  (export '%al.ext::+mono8+ :%al.ext)
  (export '%al.ext::+auxiliary-send-filter+ :%al.ext)
  (export '%al.ext::lpalgetbufferf :%al.ext)
  (export '%al.ext::fl-reflections-gain :%al.ext)
  (export '%al.ext::lpalgetfloat :%al.ext)
  (export '%al.ext::+format-rear32+ :%al.ext)
  (export '%al.ext::+flanger-waveform+ :%al.ext)
  (export '%al.ext::get-floatv :%al.ext)
  (export '%al.ext::+autowah-min-resonance+ :%al.ext)
  (export '%al.ext::+vocal-morpher-default-phonemea+ :%al.ext)
  (export '%al.ext::get-effecti :%al.ext)
  (export '%al.ext::+channels+ :%al.ext)
  (export '%al.ext::get-source3d :%al.ext)
  (export '%al.ext::+format-stereo-alaw+ :%al.ext)
  (export '%al.ext::+chorus-max-phase+ :%al.ext)
  (export '%al.ext::+renderer+ :%al.ext)
  (export '%al.ext::+loki-ima-adpcm-format+ :%al.ext)
  (export '%al.ext::+format-mono8+ :%al.ext)
  (export '%al.ext::+effect-type+ :%al.ext)
  (export '%al.ext::+equalizer-min-mid2-center+ :%al.ext)
  (export '%al.ext::+distortion-default-eqcenter+ :%al.ext)
  (export '%al.ext::+soft-loop-points+ :%al.ext)
  (export '%al.ext::+lowpass-min-gain+ :%al.ext)
  (export '%al.ext::+mono+ :%al.ext)
  (export '%al.ext::+auxiliary-send-filter-gain-auto+ :%al.ext)
  (export '%al.ext::+format-quad8+ :%al.ext)
  (export '%al.ext::+source-resampler+ :%al.ext)
  (export '%al.ext::+autowah-default-peak-gain+ :%al.ext)
  (export '%al.ext::+bandpass-max-gainlf+ :%al.ext)
  (export '%al.ext::+attributes-size+ :%al.ext)
  (export '%al.ext::+reverb-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-cupboard+ :%al.ext)
  (export '%al.ext::+reverb-preset-quarry+ :%al.ext)
  (export '%al.ext::+dedicated-gain+ :%al.ext)
  (export '%al.ext::+version+ :%al.ext)
  (export '%al.ext::+hrtf-denied+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-air-absorption-gainhf+
          :%al.ext)
  (export '%al.ext::lpalgetbufferfv :%al.ext)
  (export '%al.ext::+int+ :%al.ext)
  (export '%al.ext::+room-rolloff-factor+ :%al.ext)
  (export '%al.ext::get-integer64v :%al.ext)
  (export '%al.ext::+ext-ima4+ :%al.ext)
  (export '%al.ext::+bandpass-gainhf+ :%al.ext)
  (export '%al.ext::+loki-quadriphonic+ :%al.ext)
  (export '%al.ext::+chorus-waveform-sinusoid+ :%al.ext)
  (export '%al.ext::fl-gain-hf :%al.ext)
  (export '%al.ext::+format-71chn8+ :%al.ext)
  (export '%al.ext::lpalgetlisteneriv :%al.ext)
  (export '%al.ext::+sample-offset-latency+ :%al.ext)
  (export '%al.ext::+echo-default-feedback+ :%al.ext)
  (export '%al.ext::effectfv :%al.ext)
  (export '%al.ext::+eaxreverb-max-gain+ :%al.ext)
  (export '%al.ext::process-updates :%al.ext)
  (export '%al.ext::delete-effects :%al.ext)
  (export '%al.ext::get-buffer3i :%al.ext)
  (export '%al.ext::+default-auxiliary-send-filter-gain-auto+
          :%al.ext)
  (export '%al.ext::source3i64 :%al.ext)
  (export '%al.ext::+eaxreverb-min-late-reverb-delay+ :%al.ext)
  (export '%al.ext::fl-reflections-delay :%al.ext)
  (export '%al.ext::+vocal-morpher-phonemeb-coarse-tuning+ :%al.ext)
  (export '%al.ext::+stereo32f+ :%al.ext)
  (export '%al.ext::+echo-max-delay+ :%al.ext)
  (export '%al.ext::+foldback-event-start+ :%al.ext)
  (export '%al.ext::+equalizer-min-low-gain+ :%al.ext)
  (export '%al.ext::+echo-spread+ :%al.ext)
  (export '%al.ext::+quad8+ :%al.ext)
  (export '%al.ext::+sample-length+ :%al.ext)
  (export '%al.ext::+eaxreverb-gain+ :%al.ext)
  (export '%al.ext::get-sourcei64 :%al.ext)
  (export '%al.ext::+flanger-phase+ :%al.ext)
  (export '%al.ext::+foldback-event-block+ :%al.ext)
  (export '%al.ext::+autowah-attack-time+ :%al.ext)
  (export '%al.ext::+echo-max-spread+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-density+ :%al.ext)
  (export '%al.ext::get-sourced :%al.ext)
  (export '%al.ext::+autowah-default-resonance+ :%al.ext)
  (export '%al.ext::+default-all-devices-specifier+ :%al.ext)
  (export '%al.ext::lpalcopendevice :%al.ext)
  (export '%al.ext::+eaxreverb-gainhf+ :%al.ext)
  (export '%al.ext::+pitch-shifter-max-fine-tune+ :%al.ext)
  (export '%al.ext::+flanger-waveform-triangle+ :%al.ext)
  (export '%al.ext::+l-devices-specifier+ :%al.ext)
  (export '%al.ext::source-unqueue-buffers :%al.ext)
  (export '%al.ext::+resampler-name+ :%al.ext)
  (export '%al.ext::distance-model :%al.ext)
  (export '%al.ext::+source-state+ :%al.ext)
  (export '%al.ext::filterfv :%al.ext)
  (export '%al.ext::+buffers-processed+ :%al.ext)
  (export '%al.ext::get-sourcei :%al.ext)
  (export '%al.ext::+max-auxiliary-send-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-shortpassage+ :%al.ext)
  (export '%al.ext::+event-type-source-state-changed+ :%al.ext)
  (export '%al.ext::+reverb-preset-stonecorridor+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-gainlf+ :%al.ext)
  (export '%al.ext::+static+ :%al.ext)
  (export '%al.ext::+echo-default-delay+ :%al.ext)
  (export '%al.ext::+meters-per-unit+ :%al.ext)
  (export '%al.ext::+processed+ :%al.ext)
  (export '%al.ext::+paused+ :%al.ext)
  (export '%al.ext::+pitch+ :%al.ext)
  (export '%al.ext::lpallistener3i :%al.ext)
  (export '%al.ext::+event-type-buffer-completed+ :%al.ext)
  (export '%al.ext::+echo-delay+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-hall+ :%al.ext)
  (export '%al.ext::+format-mono-msadpcm+ :%al.ext)
  (export '%al.ext::get-effectiv :%al.ext)
  (export '%al.ext::+distortion-min-edge+ :%al.ext)
  (export '%al.ext::+bandpass-default-gainhf+ :%al.ext)
  (export '%al.ext::+capture-device-specifier+ :%al.ext)
  (export '%al.ext::+reverb-preset-cave+ :%al.ext)
  (export '%al.ext::lpalbufferfv :%al.ext)
  (export '%al.ext::lpalgetlistenerfv :%al.ext)
  (export '%al.ext::+float+ :%al.ext)
  (export '%al.ext::+effect-distortion+ :%al.ext)
  (export '%al.ext::+ext-foldback+ :%al.ext)
  (export '%al.ext::create-context :%al.ext)
  (export '%al.ext::+pitch-shifter-default-fine-tune+ :%al.ext)
  (export '%al.ext::+reverb-preset-dizzy+ :%al.ext)
  (export '%al.ext::+frequency-shifter-direction-up+ :%al.ext)
  (export '%al.ext::+exponent-distance+ :%al.ext)
  (export '%al.ext::+flanger-default-phase+ :%al.ext)
  (export '%al.ext::lpalcgetenumvalue :%al.ext)
  (export '%al.ext::+equalizer-max-high-cutoff+ :%al.ext)
  (export '%al.ext::+format-ima-adpcm-mono16+ :%al.ext)
  (export '%al.ext::+autowah-max-release-time+ :%al.ext)
  (export '%al.ext::+equalizer-default-mid2-center+ :%al.ext)
  (export '%al.ext::+soft-loopback-bformat+ :%al.ext)
  (export '%al.ext::+reverb-preset-parkinglot+ :%al.ext)
  (export '%al.ext::+fuma+ :%al.ext)
  (export '%al.ext::+ext-dedicated+ :%al.ext)
  (export '%al.ext::+invalid-enum+ :%al.ext)
  (export '%al.ext::+6point1-32f+ :%al.ext)
  (export '%al.ext::+ext-source-distance-model+ :%al.ext)
  (export '%al.ext::+ext-alaw+ :%al.ext)
  (export '%al.ext::+reverb-preset-prefab-workshop+ :%al.ext)
  (export '%al.ext::+filter-null+ :%al.ext)
  (export '%al.ext::+reverb-preset-prefab-outhouse+ :%al.ext)
  (export '%al.ext::+mono32f+ :%al.ext)
  (export '%al.ext::+format-bformat3d-8+ :%al.ext)
  (export '%al.ext::+reverb-preset-livingroom+ :%al.ext)
  (export '%al.ext::+equalizer-default-mid1-gain+ :%al.ext)
  (export '%al.ext::buffer-sub-samples :%al.ext)
  (export '%al.ext::sourcedv :%al.ext)
  (export '%al.ext::+7point1+ :%al.ext)
  (export '%al.ext::+auxiliary-send-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::+default-air-absorption-factor+ :%al.ext)
  (export '%al.ext::+device-clock+ :%al.ext)
  (export '%al.ext::+format-51chn16+ :%al.ext)
  (export '%al.ext::+bandpass-max-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-lfreference+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-b+ :%al.ext)
  (export '%al.ext::+version-1-1+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-mediumroom+ :%al.ext)
  (export '%al.ext::+echo-default-spread+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-reflections-gain+ :%al.ext)
  (export '%al.ext::+enumerate-all+ :%al.ext)
  (export '%al.ext::+sec-offset-latency+ :%al.ext)
  (export '%al.ext::open-device :%al.ext)
  (export '%al.ext::+7point1-32f+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-reflections-delay+ :%al.ext)
  (export '%al.ext::+chorus-feedback+ :%al.ext)
  (export '%al.ext::+inverse-distance-clamped+ :%al.ext)
  (export '%al.ext::+soft-direct-channels-remix+ :%al.ext)
  (export '%al.ext::+flanger-feedback+ :%al.ext)
  (export '%al.ext::+echo-default-lrdelay+ :%al.ext)
  (export '%al.ext::+format-71chn-mulaw+ :%al.ext)
  (export '%al.ext::+reverb-preset-city-subway+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-density+ :%al.ext)
  (export '%al.ext::+rear32f+ :%al.ext)
  (export '%al.ext::+max-auxiliary-sends+ :%al.ext)
  (export '%al.ext::+device-clock-latency+ :%al.ext)
  (export '%al.ext::+true+ :%al.ext)
  (export '%al.ext::+format-quad32+ :%al.ext)
  (export '%al.ext::+vocal-morpher-default-phonemeb-coarse-tuning+
          :%al.ext)
  (export '%al.ext::+reverb-preset-city+ :%al.ext)
  (export '%al.ext::+vocal-morpher-max-waveform+ :%al.ext)
  (export '%al.ext::+initial+ :%al.ext)
  (export '%al.ext::source-rewind :%al.ext)
  (export '%al.ext::double :%al.ext)
  (export '%al.ext::+format-stereo-msadpcm+ :%al.ext)
  (export '%al.ext::+reverb-preset-city-library+ :%al.ext)
  (export '%al.ext::+format-51chn-mulaw+ :%al.ext)
  (export '%al.ext::+hrtf-enabled+ :%al.ext)
  (export '%al.ext::+highpass-default-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-density+ :%al.ext)
  (export '%al.ext::get-bufferiv :%al.ext)
  (export '%al.ext::+distortion-default-lowpass-cutoff+ :%al.ext)
  (export '%al.ext::+invalid-cont+ :%al.ext)
  (export '%al.ext::+format-type+ :%al.ext)
  (export '%al.ext::fl-room-rolloff-factor :%al.ext)
  (export '%al.ext::effectiv :%al.ext)
  (export '%al.ext::+reverb-preset-concerthall+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-longpassage+ :%al.ext)
  (export '%al.ext::get-double :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-l+ :%al.ext)
  (export '%al.ext::+reverb-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+unpack-block-alignment+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-modulation-time+ :%al.ext)
  (export '%al.ext::+min-direct-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::+default-meters-per-unit+ :%al.ext)
  (export '%al.ext::+capture-default-device-specifier+ :%al.ext)
  (export '%al.ext::request-foldback-start :%al.ext)
  (export '%al.ext::+reverb-preset-dome-saintpauls+ :%al.ext)
  (export '%al.ext::get-stringi :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-e+ :%al.ext)
  (export '%al.ext::fl-density :%al.ext)
  (export '%al.ext::+min-air-absorption-factor+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-i+ :%al.ext)
  (export '%al.ext::request-foldback-stop :%al.ext)
  (export '%al.ext::+reverb-max-decay-time+ :%al.ext)
  (export '%al.ext::fl-gain-lf :%al.ext)
  (export '%al.ext::+stereo+ :%al.ext)
  (export '%al.ext::+eaxreverb-modulation-time+ :%al.ext)
  (export '%al.ext::+equalizer-mid1-center+ :%al.ext)
  (export '%al.ext::+reverb-preset-hangar+ :%al.ext)
  (export '%al.ext::+echo-min-feedback+ :%al.ext)
  (export '%al.ext::lpalgetfloatv :%al.ext)
  (export '%al.ext::device-pause :%al.ext)
  (export '%al.ext::+6point1-8+ :%al.ext)
  (export '%al.ext::lpalgetintegerv :%al.ext)
  (export '%al.ext::device-resume :%al.ext)
  (export '%al.ext::+distortion-min-eqcenter+ :%al.ext)
  (export '%al.ext::+filter-first-parameter+ :%al.ext)
  (export '%al.ext::lpalbufferi :%al.ext)
  (export '%al.ext::+deferred-updates+ :%al.ext)
  (export '%al.ext::+out-of-memory+ :%al.ext)
  (export '%al.ext::+flanger-min-delay+ :%al.ext)
  (export '%al.ext::+reverb-preset-sport-stadiumtannoy+ :%al.ext)
  (export '%al.ext::lpaldopplervelocity :%al.ext)
  (export '%al.ext::+chorus-default-phase+ :%al.ext)
  (export '%al.ext::fl-echo-depth :%al.ext)
  (export '%al.ext::+chorus-waveform+ :%al.ext)
  (export '%al.ext::get-auxiliary-effect-slotfv :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-f+ :%al.ext)
  (export '%al.ext::get-source3f :%al.ext)
  (export '%al.ext::+6point1-16+ :%al.ext)
  (export '%al.ext::lpalgetinteger :%al.ext)
  (export '%al.ext::+reverb-max-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-diffusion+ :%al.ext)
  (export '%al.ext::+distortion-min-eqbandwidth+ :%al.ext)
  (export '%al.ext::lpalgenbuffers :%al.ext)
  (export '%al.ext::lpalccaptureclosedevice :%al.ext)
  (export '%al.ext::+device-specifier+ :%al.ext)
  (export '%al.ext::lpalgetbuffer3i :%al.ext)
  (export '%al.ext::+flanger-waveform-sinusoid+ :%al.ext)
  (export '%al.ext::+lowpass-max-gainhf+ :%al.ext)
  (export '%al.ext::+cone-inner-angle+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-decay-lfratio+ :%al.ext)
  (export '%al.ext::+min-meters-per-unit+ :%al.ext)
  (export '%al.ext::get-sourcei64v :%al.ext)
  (export '%al.ext::+default-resampler+ :%al.ext)
  (export '%al.ext::+reverb-max-reflections-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-late-reverb-delay+ :%al.ext)
  (export '%al.ext::+cone-outer-gain+ :%al.ext)
  (export '%al.ext::+remix-unmatched+ :%al.ext)
  (export '%al.ext::+highpass-max-gain+ :%al.ext)
  (export '%al.ext::+format-stereo-double+ :%al.ext)
  (export '%al.ext::+equalizer-default-mid2-width+ :%al.ext)
  (export '%al.ext::source-pause :%al.ext)
  (export '%al.ext::+lowpass-gain+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-j+ :%al.ext)
  (export '%al.ext::source-play :%al.ext)
  (export '%al.ext::+reverb-min-gainhf+ :%al.ext)
  (export '%al.ext::+autowah-release-time+ :%al.ext)
  (export '%al.ext::+distortion-edge+ :%al.ext)
  (export '%al.ext::+frequency-shifter-left-direction+ :%al.ext)
  (export '%al.ext::auxiliary-effect-slotf :%al.ext)
  (export '%al.ext::+max-direct-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::render-samples :%al.ext)
  (export '%al.ext::+vocal-morpher-waveform+ :%al.ext)
  (export '%al.ext::suspend-context :%al.ext)
  (export '%al.ext::+reverb-preset-sewerpipe+ :%al.ext)
  (export '%al.ext::+ring-modulator-min-frequency+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-iy+ :%al.ext)
  (export '%al.ext::lpalgetprocaddress :%al.ext)
  (export '%al.ext::+source-distance-model+ :%al.ext)
  (export '%al.ext::lpalgetbooleanv :%al.ext)
  (export '%al.ext::+reverb-max-gainhf+ :%al.ext)
  (export '%al.ext::+format-mono-mulaw+ :%al.ext)
  (export '%al.ext::+sn3d+ :%al.ext)
  (export '%al.ext::bufferf :%al.ext)
  (export '%al.ext::+gain-limit+ :%al.ext)
  (export '%al.ext::+equalizer-mid2-width+ :%al.ext)
  (export '%al.ext::get-bufferf :%al.ext)
  (export '%al.ext::+5point1-32f+ :%al.ext)
  (export '%al.ext::lpalcgetprocaddress :%al.ext)
  (export '%al.ext::loopback-open-device :%al.ext)
  (export '%al.ext::get-sourcefv :%al.ext)
  (export '%al.ext::+loki-wave-format+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-p+ :%al.ext)
  (export '%al.ext::+reverb-preset-alley+ :%al.ext)
  (export '%al.ext::+echo-max-damping+ :%al.ext)
  (export '%al.ext::+echo-lrdelay+ :%al.ext)
  (export '%al.ext::buffer-sub-data :%al.ext)
  (export '%al.ext::+effect-reverb+ :%al.ext)
  (export '%al.ext::+echo-min-damping+ :%al.ext)
  (export '%al.ext::+ext-disconnect+ :%al.ext)
  (export '%al.ext::lpalsourcequeuebuffers :%al.ext)
  (export '%al.ext::+stereo-sources+ :%al.ext)
  (export '%al.ext::i-decay-hf-limit :%al.ext)
  (export '%al.ext::+soft-pause-device+ :%al.ext)
  (export '%al.ext::+format-stereo-float32+ :%al.ext)
  (export '%al.ext::+format-stereo8+ :%al.ext)
  (export '%al.ext::+format-71chn16+ :%al.ext)
  (export '%al.ext::+reverb-preset-mood-memory+ :%al.ext)
  (export '%al.ext::+effectslot-effect+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phonemea+ :%al.ext)
  (export '%al.ext::get-doublev :%al.ext)
  (export '%al.ext::+max-gain+ :%al.ext)
  (export '%al.ext::lpaldopplerfactor :%al.ext)
  (export '%al.ext::event-callback :%al.ext)
  (export '%al.ext::+capture-samples+ :%al.ext)
  (export '%al.ext::+effect-null+ :%al.ext)
  (export '%al.ext::lpalgetenumvalue :%al.ext)
  (export '%al.ext::+ring-modulator-default-frequency+ :%al.ext)
  (export '%al.ext::+5point1-8+ :%al.ext)
  (export '%al.ext::get-auxiliary-effect-slotiv :%al.ext)
  (export '%al.ext::+reverb-preset-dustyroom+ :%al.ext)
  (export '%al.ext::+reverb-max-reflections-delay+ :%al.ext)
  (export '%al.ext::+effect-autowah+ :%al.ext)
  (export '%al.ext::get-sourceiv :%al.ext)
  (export '%al.ext::+illegal-command+ :%al.ext)
  (export '%al.ext::+reverb-preset-city-streets+ :%al.ext)
  (export '%al.ext::get-integer :%al.ext)
  (export '%al.ext::+stopped+ :%al.ext)
  (export '%al.ext::+velocity+ :%al.ext)
  (export '%al.ext::+pitch-shifter-min-fine-tune+ :%al.ext)
  (export '%al.ext::+eaxreverb-diffusion+ :%al.ext)
  (export '%al.ext::+chorus-phase+ :%al.ext)
  (export '%al.ext::|C:@SA@EFXEAXREVERBPROPERTIES| :%al.ext)
  (export '%al.ext::+lowpass-default-gainhf+ :%al.ext)
  (export '%al.ext::+chorus-waveform-triangle+ :%al.ext)
  (export '%al.ext::+frequency-shifter-right-direction+ :%al.ext)
  (export '%al.ext::+ambisonic-order+ :%al.ext)
  (export '%al.ext::+reverb-gain+ :%al.ext)
  (export '%al.ext::lpalsourcerewind :%al.ext)
  (export '%al.ext::+hrtf-headphones-detected+ :%al.ext)
  (export '%al.ext::+reverb-preset-outdoors-valley+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-a+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-modulation-depth+ :%al.ext)
  (export '%al.ext::+quad16+ :%al.ext)
  (export '%al.ext::+reverb-max-decay-hfratio+ :%al.ext)
  (export '%al.ext::+echo-min-delay+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-k+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-decay-hfratio+ :%al.ext)
  (export '%al.ext::+output-limiter+ :%al.ext)
  (export '%al.ext::+flanger-default-depth+ :%al.ext)
  (export '%al.ext::+ring-modulator-min-waveform+ :%al.ext)
  (export '%al.ext::+direct-channels+ :%al.ext)
  (export '%al.ext::+direct-filter+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-smallroom+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-echo-depth+ :%al.ext)
  (export '%al.ext::+reverb-preset-paddedcell+ :%al.ext)
  (export '%al.ext::capture-open-device :%al.ext)
  (export '%al.ext::+ext-thread-local-context+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-shortpassage+ :%al.ext)
  (export '%al.ext::+distortion-eqcenter+ :%al.ext)
  (export '%al.ext::+effect-echo+ :%al.ext)
  (export '%al.ext::+highpass-gainlf+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-echo-time+ :%al.ext)
  (export '%al.ext::+reverb-preset-chapel+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-reflections-delay+ :%al.ext)
  (export '%al.ext::+ext-double+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-alcove+ :%al.ext)
  (export '%al.ext::+double+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-decay-hflimit+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-gainlf+ :%al.ext)
  (export '%al.ext::get-string :%al.ext)
  (export '%al.ext::+pitch-shifter-coarse-tune+ :%al.ext)
  (export '%al.ext::+equalizer-min-mid2-gain+ :%al.ext)
  (export '%al.ext::+min-gain+ :%al.ext)
  (export '%al.ext::+compressor-onoff+ :%al.ext)
  (export '%al.ext::+false+ :%al.ext)
  (export '%al.ext::+device-latency+ :%al.ext)
  (export '%al.ext::+soft-source-resampler+ :%al.ext)
  (export '%al.ext::+autowah-max-peak-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-decay-time+ :%al.ext)
  (export '%al.ext::+soft-hrtf+ :%al.ext)
  (export '%al.ext::listenerfv :%al.ext)
  (export '%al.ext::+vocal-morpher-waveform-triangle+ :%al.ext)
  (export '%al.ext::is-enabled :%al.ext)
  (export '%al.ext::bufferi :%al.ext)
  (export '%al.ext::+vocal-morpher-max-phonemea-coarse-tuning+
          :%al.ext)
  (export '%al.ext::+reverb-preset-factory-mediumroom+ :%al.ext)
  (export '%al.ext::get-sourcef :%al.ext)
  (export '%al.ext::+reverb-preset-factory-alcove+ :%al.ext)
  (export '%al.ext::+frequency-shifter-max-frequency+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-courtyard+ :%al.ext)
  (export '%al.ext::get-bufferfv :%al.ext)
  (export '%al.ext::+eaxreverb-min-reflections-delay+ :%al.ext)
  (export '%al.ext::lpalccaptureopendevice :%al.ext)
  (export '%al.ext::+echo-min-lrdelay+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-tunnel+ :%al.ext)
  (export '%al.ext::+pack-block-alignment+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-gainhf+ :%al.ext)
  (export '%al.ext::+chorus-default-feedback+ :%al.ext)
  (export '%al.ext::+chorus-delay+ :%al.ext)
  (export '%al.ext::lpalsourcepause :%al.ext)
  (export '%al.ext::+7point1-16+ :%al.ext)
  (export '%al.ext::+highpass-min-gainlf+ :%al.ext)
  (export '%al.ext::+ring-modulator-default-highpass-cutoff+
          :%al.ext)
  (export '%al.ext::+max-cone-outer-gainhf+ :%al.ext)
  (export '%al.ext::+cone-outer-gainhf+ :%al.ext)
  (export '%al.ext::+rear8+ :%al.ext)
  (export '%al.ext::lpaldeletesources :%al.ext)
  (export '%al.ext::lpalgetdouble :%al.ext)
  (export '%al.ext::fl-diffusion :%al.ext)
  (export '%al.ext::+none+ :%al.ext)
  (export '%al.ext::+highpass-default-gainlf+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-longpassage+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-t+ :%al.ext)
  (export '%al.ext::+effect-pitch-shifter+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-m+ :%al.ext)
  (export '%al.ext::+effect-frequency-shifter+ :%al.ext)
  (export '%al.ext::+streaming+ :%al.ext)
  (export '%al.ext::buffer-samples :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-s+ :%al.ext)
  (export '%al.ext::+eaxreverb-min-hfreference+ :%al.ext)
  (export '%al.ext::+format-71chn32+ :%al.ext)
  (export '%al.ext::+equalizer-min-mid1-center+ :%al.ext)
  (export '%al.ext::lpalsource3f :%al.ext)
  (export '%al.ext::+soft-output-limiter+ :%al.ext)
  (export '%al.ext::get-listener3i :%al.ext)
  (export '%al.ext::+chorus-default-waveform+ :%al.ext)
  (export '%al.ext::+vocal-morpher-max-phonemeb+ :%al.ext)
  (export '%al.ext::+buffer+ :%al.ext)
  (export '%al.ext::+quad32f+ :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-largeroom+ :%al.ext)
  (export '%al.ext::+unsigned-short+ :%al.ext)
  (export '%al.ext::+pending+ :%al.ext)
  (export '%al.ext::+equalizer-low-cutoff+ :%al.ext)
  (export '%al.ext::+soft-source-length+ :%al.ext)
  (export '%al.ext::+eaxreverb-hfreference+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-gainhf+ :%al.ext)
  (export '%al.ext::+sec-offset-clock+ :%al.ext)
  (export '%al.ext::+ext-source-radius+ :%al.ext)
  (export '%al.ext::+reverb-preset-forest+ :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-mediumroom+ :%al.ext)
  (export '%al.ext::auxiliary-effect-slotiv :%al.ext)
  (export '%al.ext::+effectslot-target+ :%al.ext)
  (export '%al.ext::+vocal-morpher-default-rate+ :%al.ext)
  (export '%al.ext::get-filterfv :%al.ext)
  (export '%al.ext::+reverb-preset-factory-hall+ :%al.ext)
  (export '%al.ext::eaxreverbproperties :%al.ext)
  (export '%al.ext::+frequency-shifter-frequency+ :%al.ext)
  (export '%al.ext::lpalenable :%al.ext)
  (export '%al.ext::+ring-modulator-min-highpass-cutoff+ :%al.ext)
  (export '%al.ext::+equalizer-max-mid2-width+ :%al.ext)
  (export '%al.ext::+orientation+ :%al.ext)
  (export '%al.ext::lpalgetsourcefv :%al.ext)
  (export '%al.ext::+foldback-event-stop+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-longpassage+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-modulation-time+ :%al.ext)
  (export '%al.ext::+distortion-max-lowpass-cutoff+ :%al.ext)
  (export '%al.ext::+min-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+ext-default-filter-order+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-alcove+ :%al.ext)
  (export '%al.ext::+vocal-morpher-default-phonemeb+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-largeroom+ :%al.ext)
  (export '%al.ext::buffer-data :%al.ext)
  (export '%al.ext::+refresh+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-aa+ :%al.ext)
  (export '%al.ext::+equalizer-default-high-cutoff+ :%al.ext)
  (export '%al.ext::+event-callback-user-param+ :%al.ext)
  (export '%al.ext::+ext-mcformats+ :%al.ext)
  (export '%al.ext::+effectslot-auxiliary-send-auto+ :%al.ext)
  (export '%al.ext::+reverb-preset-hallway+ :%al.ext)
  (export '%al.ext::+distortion-min-gain+ :%al.ext)
  (export '%al.ext::+format-bformat3d-float32+ :%al.ext)
  (export '%al.ext::+eaxreverb-late-reverb-gain+ :%al.ext)
  (export '%al.ext::lpalgetbufferi :%al.ext)
  (export '%al.ext::+soft-block-alignment+ :%al.ext)
  (export '%al.ext::lpalsourcestop :%al.ext)
  (export '%al.ext::+format-bformat3d-16+ :%al.ext)
  (export '%al.ext::+format-bformat2d-mulaw+ :%al.ext)
  (export '%al.ext::+6point1+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-d+ :%al.ext)
  (export '%al.ext::+autowah-max-resonance+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-o+ :%al.ext)
  (export '%al.ext::is-buffer :%al.ext)
  (export '%al.ext::+unsigned-int+ :%al.ext)
  (export '%al.ext::+source-spatialize+ :%al.ext)
  (export '%al.ext::lpalfoldbackcallback :%al.ext)
  (export '%al.ext::+reverb-preset-bathroom+ :%al.ext)
  (export '%al.ext::get-listenerf :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-cupboard+ :%al.ext)
  (export '%al.ext::+equalizer-high-gain+ :%al.ext)
  (export '%al.ext::lpaldisable :%al.ext)
  (export '%al.ext::+vocal-morpher-phonemea-coarse-tuning+ :%al.ext)
  (export '%al.ext::+default-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::lpalgetdoublev :%al.ext)
  (export '%al.ext::+eaxreverb-max-lfreference+ :%al.ext)
  (export '%al.ext::+max-distance+ :%al.ext)
  (export '%al.ext::byte :%al.ext)
  (export '%al.ext::lpalcisextensionpresent :%al.ext)
  (export '%al.ext::lpalsourceiv :%al.ext)
  (export '%al.ext::is-source :%al.ext)
  (export '%al.ext::+eaxreverb-min-late-reverb-gain+ :%al.ext)
  (export '%al.ext::+reverb-preset-icepalace-smallroom+ :%al.ext)
  (export '%al.ext::+version-0-1+ :%al.ext)
  (export '%al.ext::+format-61chn8+ :%al.ext)
  (export '%al.ext::+equalizer-min-low-cutoff+ :%al.ext)
  (export '%al.ext::+distortion-default-eqbandwidth+ :%al.ext)
  (export '%al.ext::+reverb-preset-wooden-alcove+ :%al.ext)
  (export '%al.ext::listenerf :%al.ext)
  (export '%al.ext::char :%al.ext)
  (export '%al.ext::+eaxreverb-min-modulation-depth+ :%al.ext)
  (export '%al.ext::+flanger-min-phase+ :%al.ext)
  (export '%al.ext::+filter-highpass+ :%al.ext)
  (export '%al.ext::+reverb-preset-castle-largeroom+ :%al.ext)
  (export '%al.ext::+chan-cd-loki+ :%al.ext)
  (export '%al.ext::+chorus-min-rate+ :%al.ext)
  (export '%al.ext::+echo-feedback+ :%al.ext)
  (export '%al.ext::+ext-foldback-name+ :%al.ext)
  (export '%al.ext::+num-resamplers+ :%al.ext)
  (export '%al.ext::+chorus-min-waveform+ :%al.ext)
  (export '%al.ext::sourcei :%al.ext)
  (export '%al.ext::+reverb-preset-spacestation-smallroom+ :%al.ext)
  (export '%al.ext::+reverb-preset-city-abandoned+ :%al.ext)
  (export '%al.ext::ushort :%al.ext)
  (export '%al.ext::lpalgetsourcef :%al.ext)
  (export '%al.ext::+reverb-preset-outdoors-deepcanyon+ :%al.ext)
  (export '%al.ext::+reverb-preset-pipe-longthin+ :%al.ext)
  (export '%al.ext::+5point1+ :%al.ext)
  (export '%al.ext::doppler-velocity :%al.ext)
  (export '%al.ext::+hrtf-unsupported-format+ :%al.ext)
  (export '%al.ext::lpalisenabled :%al.ext)
  (export '%al.ext::+soft-bformat-ex+ :%al.ext)
  (export '%al.ext::+soft-direct-channels+ :%al.ext)
  (export '%al.ext::enum :%al.ext)
  (export '%al.ext::+reverb-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-reflections-pan-xyz+ :%al.ext)
  (export '%al.ext::+reverb-preset-factory-largeroom+ :%al.ext)
  (export '%al.ext::+chorus-min-feedback+ :%al.ext)
  (export '%al.ext::+format-rear16+ :%al.ext)
  (export '%al.ext::+distortion-gain+ :%al.ext)
  (export '%al.ext::+ambisonic-layout+ :%al.ext)
  (export '%al.ext::+max-auxiliary-send-filter-gain-auto+ :%al.ext)
  (export '%al.ext::+eaxreverb-max-late-reverb-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-default-lfreference+ :%al.ext)
  (export '%al.ext::+compressor-default-onoff+ :%al.ext)
  (export '%al.ext::+max-meters-per-unit+ :%al.ext)
  (export '%al.ext::+reverb-default-decay-hflimit+ :%al.ext)
  (export '%al.ext::+presets-h+ :%al.ext)
  (export '%al.ext::+foldback-mode-mono+ :%al.ext)
  (export '%al.ext::+ext-float32+ :%al.ext)
  (export '%al.ext::+format-quad16-loki+ :%al.ext)
  (export '%al.ext::+openal+ :%al.ext)
  (export '%al.ext::get-buffer-samples :%al.ext)
  (export '%al.ext::+flanger-max-phase+ :%al.ext)
  (export '%al.ext::+effect-compressor+ :%al.ext)
  (export '%al.ext::+reverb-min-room-rolloff-factor+ :%al.ext)
  (export '%al.ext::+reverb-reflections-gain+ :%al.ext)
  (export '%al.ext::set-thread-context :%al.ext)
  (export '%al.ext::+byte-offset+ :%al.ext)
  (export '%al.ext::+lowpass-default-gain+ :%al.ext)
  (export '%al.ext::+eaxreverb-reflections-pan+ :%al.ext)
  (export '%al.ext::+reverb-preset-prefab-schoolroom+ :%al.ext)
  (export '%al.ext::lpalccapturestop :%al.ext)
  (export '%al.ext::get-current-context :%al.ext)
  (export '%al.ext::+invalid-name+ :%al.ext)
  (export '%al.ext::get-integerv :%al.ext)
  (export '%al.ext::buffer3f :%al.ext)
  (export '%al.ext::+reverb-preset-pipe-small+ :%al.ext)
  (export '%al.ext::lpalcprocesscont :%al.ext)
  (export '%al.ext::+reverb-preset-carpetedhallway+ :%al.ext)
  (export '%al.ext::+reverb-preset-city-underpass+ :%al.ext)
  (export '%al.ext::lpalsourcef :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-ih+ :%al.ext)
  (export '%al.ext::+flanger-default-feedback+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-uw+ :%al.ext)
  (export '%al.ext::+unsigned-byte3+ :%al.ext)
  (export '%al.ext::+default-direct-filter-gainhf-auto+ :%al.ext)
  (export '%al.ext::+format-61chn32+ :%al.ext)
  (export '%al.ext::+echo-min-spread+ :%al.ext)
  (export '%al.ext::+frequency-shifter-default-right-direction+
          :%al.ext)
  (export '%al.ext::+soft-gain-clamp-ex+ :%al.ext)
  (export '%al.ext::+format-quad16+ :%al.ext)
  (export '%al.ext::lpalgetlistener3i :%al.ext)
  (export '%al.ext::+reverb-min-reflections-gain+ :%al.ext)
  (export '%al.ext::+vocal-morpher-phoneme-eh+ :%al.ext)
  (export '%al.ext::+equalizer-min-mid1-width+ :%al.ext)
  (export '%al.ext::+ext-mulaw-mcformats+ :%al.ext)
  (export '%al.ext::+flanger-max-feedback+ :%al.ext)
  (export '%al.ext::lpalccapturesamples :%al.ext)
  (export '%al.ext::+eaxreverb-min-air-absorption-gainhf+ :%al.ext)
  (export '%al.ext::+reverb-preset-smallwaterroom+ :%al.ext)
  (export '%al.ext::+reverb-preset-mood-heaven+ :%al.ext)
  (export '%al.ext::+hrtf-specifier+ :%al.ext)
  (export '%al.ext::+reverb-preset-driving-incar-racer+ :%al.ext))

